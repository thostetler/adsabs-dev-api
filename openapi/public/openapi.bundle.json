{
  "openapi": "3.0.3",
  "info": {
    "title": "API for Astrophysics Data System (ADS)",
    "description": "## API for the NASA Astrophysics Data System\n\nThe source code for the project can be found at https://github.com/adsabs.\n\nIndividual components:\n* Search: https://github.com/adsabs/solr-service\n* Stored search: https://github.com/adsabs/vault\n* Libraries: https://github.com/adsabs/biblib-service\n* Export: https://github.com/adsabs/export_service\n* Metrics: https://github.com/adsabs/metrics_service\n* Author affiliation: https://github.com/adsabs/author_affiliation_service\n* Citation helper: https://github.com/adsabs/citation_helper_service\n* Classic import: https://github.com/adsabs/harbour-service\n* Objects: https://github.com/adsabs/object_service\n* Journals: https://github.com/adsabs/ADSJournalsDB\n* Recommender: https://github.com/adsabs/oracle_service\n* Reference: https://github.com/adsabs/reference_service\n* Resolver: https://github.com/adsabs/resolver_service\n* Notifications: https://github.com/adsabs/vault\n* Visualizations: https://github.com/adsabs/vis-services\n\nThis documentation follows the [OpenAPI specification](https://swagger.io/specification/).\nThe UI was created with [RapiDoc](https://mrin9.github.io/RapiDoc/index.html).\n",
    "termsOfService": "https://ui.adsabs.harvard.edu/help/terms/",
    "contact": {
      "name": "ADS Help",
      "url": "https://github.com/adsabs/adsabs-dev-api",
      "email": "adshelp@cfa.harvard.edu"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.adsabs.harvard.edu/{basePath}",
      "description": "Production Server",
      "variables": {
        "basePath": {
          "default": "v1",
          "enum": [
            "v1"
          ]
        }
      }
    },
    {
      "url": "https://devapi.adsabs.harvard.edu/{basePath}",
      "description": "Development Server",
      "variables": {
        "basePath": {
          "default": "v1",
          "enum": [
            "v1"
          ]
        }
      }
    }
  ],
  "security": [
    {
      "ApiKeySecurity": []
    }
  ],
  "tags": [
    {
      "name": "search"
    },
    {
      "name": "stored search"
    },
    {
      "name": "libraries"
    },
    {
      "name": "export (tagged formats)"
    },
    {
      "name": "export (LaTeX formats)"
    },
    {
      "name": "export (XML formats)"
    },
    {
      "name": "export (other)"
    },
    {
      "name": "metrics"
    },
    {
      "name": "author affiliation"
    },
    {
      "name": "citation helper"
    },
    {
      "name": "classic import"
    },
    {
      "name": "objects"
    },
    {
      "name": "journals"
    },
    {
      "name": "recommender"
    },
    {
      "name": "reference"
    },
    {
      "name": "resolver"
    },
    {
      "name": "notifications"
    },
    {
      "name": "visualizations"
    }
  ],
  "externalDocs": {
    "description": "Complete documentation describing how to use this API",
    "url": "https://github.com/adsabs/adsabs-dev-api"
  },
  "paths": {
    "/search/query": {
      "get": {
        "summary": "Search ADS",
        "description": "Do a search.\n\nQuery the search engine and return results. All parameters have to be properly url-encoded UTF-8. The response body will always be JSON encoded.\n\n## Example Search\n`q=bibcode:2012A%26A...542A..16R&fl=bibcode,author,pub,identifier,title,property,abstract,keyword,aff`\n## Example Response\n```{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":3,\n    \"params\":{\n      \"q\":\"bibcode:2012A&A...542A..16R\",\n      \"fl\":\"bibcode,author,pub,identifier,title,property,abstract,keyword\",\n      \"start\":\"0\",\n      \"rows\":\"10\",\n      \"wt\":\"json\"}},\n  \"response\":{\"numFound\":1,\"start\":0,\"docs\":[\n    {\n      \"identifier\":[\"2012arXiv1204.4485R\",\n        \"2012A&A...542A..16R\",\n        \"10.1051/0004-6361/201118723\",\n        \"10.1051/0004-6361/201118723\",\n        \"arXiv:1204.4485\",\n        \"2012arXiv1204.4485R\"],\n      \"abstract\":\"X-ray surveys contain sizable numbers [...],\n      \"property\":[\"ARTICLE\",\n        \"ASSOCIATED\",\n        \"DATA\",\n        \"EPRINT_OPENACCESS\",\n        \"ESOURCE\",\n        \"OPENACCESS\",\n        \"PUB_OPENACCESS\",\n        \"REFEREED\"],\n      \"bibcode\":\"2012A&A...542A..16R\",\n      \"author\":[\"Ranalli, P.\",\n        \"Comastri, A.\",\n        \"Zamorani, G.\",\n        \"Cappelluti, N.\",\n        \"Civano, F.\",\n        \"Georgantopoulos, I.\",\n        \"Gilli, R.\",\n        \"Schinnerer, E.\",\n        \"Smolčić, V.\",\n        \"Vignali, C.\"],\n      \"pub\":\"Astronomy and Astrophysics\",\n      \"keyword\":[\"X-rays: galaxies\",\n        \"radio continuum: galaxies\",\n        \"galaxies: fundamental parameters\",\n        \"galaxies: star formation\",\n        \"galaxies: active\",\n        \"galaxies: high-redshift\",\n        \"Astrophysics - Cosmology and Extragalactic Astrophysics\"],\n      \"title\":[\"X-ray properties of radio-selected star forming galaxies in the Chandra-COSMOS survey\"]}]\n  }}\n```\n## Example Search Requests\nQuery | Explanation\n------|-------------------------------------------------\n `q=bibcode:2011ApJ...737..103S` |  Search by bibcode\n `q=black+holes&fq=database:astronomy` |  Search for \"black holes\", restricted to astronomy content\n `q=dark+energy&fq=author:\"Civano,+F\"&sort=citation_count+desc` |  Search for \"dark energy\", filter by author, sort by citation count\n`q=dark+energy&sort=citation_count+desc&fl=bibcode,property` |   Return *bibcode* and *property* values\n`q=author:\"Kurtz,+M\"&fq=property:refereed`|   Limit a search to only refereed articles\n`q=transiting+exoplanets&rows=200`|  Search for \"transiting exoplanets\", get 200 rows\n`q=transiting+exoplanets&rows=200&start=201`|   Same search but get the next 200 rows\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/q"
          },
          {
            "$ref": "#/components/parameters/fq"
          },
          {
            "$ref": "#/components/parameters/fl"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/rows"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchResults"
          },
          "400": {
            "description": "Malformed request"
          },
          "404": {
            "description": "Resource not found"
          },
          "499": {
            "description": "Server too busy"
          },
          "500": {
            "description": "Server error"
          }
        },
        "tags": [
          "search"
        ]
      }
    },
    "/search/qtree": {
      "get": {
        "summary": "(advanced) Search ADS and return a query tree object",
        "description": "Returns a `query tree` (Abstract Syntax Tree - AST) as understood by our query parser. The structure can be used by external applications to rewrite the query or check its syntactic correctness.\n\n## Example result\n```JSON\n{\n     \"qtree\": \"\\n{\\\"name\\\":\\\"OPERATOR\\\", \\\"label\\\":\\\"DEFOP\\\", \\\"children\\\": [\\n    {\\\"name\\\":\\\"MODIFIER\\\", \\\"label\\\":\\\"MODIFIER\\\", \\\"children\\\": [\\n        {\\\"name\\\":\\\"TMODIFIER\\\", \\\"label\\\":\\\"TMODIFIER\\\", \\\"children\\\": [\\n            {\\\"name\\\":\\\"FIELD\\\", \\\"label\\\":\\\"FIELD\\\", \\\"children\\\": [\\n                {\\\"name\\\":\\\"QNORMAL\\\", \\\"label\\\":\\\"QNORMAL\\\", \\\"children\\\": [\\n                    {\\\"name\\\":\\\"TERM_NORMAL\\\", \\\"input\\\":\\\"star\\\", \\\"start\\\":0, \\\"end\\\":3}]\\n                }]\\n            }]\\n        }]\\n    }]\\n}\",\n     \"responseHeader\": {\n      \"status\": 0,\n      \"QTime\": 6,\n      \"params\": {\n       \"q\": \"star\",\n       \"wt\": \"json\",\n       \"fl\": \"id\"\n      }\n     }\n    }\n```\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/q"
          },
          {
            "$ref": "#/components/parameters/fq"
          },
          {
            "$ref": "#/components/parameters/fl"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/rows"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/QTree"
          },
          "400": {
            "description": "Malformed request"
          },
          "404": {
            "description": "Resource not found"
          },
          "499": {
            "description": "Server too busy"
          },
          "500": {
            "description": "Server error"
          }
        },
        "tags": [
          "search"
        ]
      }
    },
    "/search/bigquery": {
      "post": {
        "summary": "Search using bigquery",
        "description": "Search endpoint which accepts a list of many IDs (bibcodes). Supports paging.\n\nThis endpoint accepts standard search query parameters and returns standard search results, but it also accepts as input a very large query (i.e. a query that can be expressed only as a list of search criteria, typically IDs). There is currently no limit to the size of the submitted data (besides buffer/time limits imposed by our API frontend); however, there are severe limits on how often you can call this endpoint. Typically, only 100 requests per day per user are allowed.\n\nThe `bigquery` is always executed as a filter **after** the main query (to filter out unwanted results and keep only the results specified by the `bigquery`). You may want to use `q=*:*` to filter contents of the whole database, however it is advisable to make the `q` as specific as possible. Broad queries have higher `qTime` (execution time) and that will be counted towards your rate-limit (in the future).\n\nThe bigquery filter is *applied only after* the main search (i.e. it limits results of the main search).\n\n## Example requests\n\nPython\n\n```\n  import requests\n  bibcodes=\"bibcode\\n1907AN....174...59.\\n1908PA.....16..445.\\n1989LNP...334..242S\"\n  r = requests.post('https://api.adsabs.harvard.edu/v1/search/bigquery',\n       params={'q':'*:*', 'wt':'json', 'fq':'{!bitset}', 'fl':'bibcode'},\n       headers={'Authorization': 'Bearer:TOKEN'},\n       data=bibcodes)\n```\n\nBash curl\n\n```\n  curl 'https://api.adsabs.harvard.edu/v1/search/bigquery?q=*:*&fl=bibcode' \\\n  -X 'POST' -H 'Authorization: Bearer TOKEN' -H 'Content-Type: big-query/csv' \\\n  -d $'bibcode\\n1907AN....174...59.\\n1908PA.....16..445.\\n1989LNP...334..242S'\n```\n",
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/q"
          },
          {
            "$ref": "#/components/parameters/fq"
          },
          {
            "$ref": "#/components/parameters/fl"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/rows"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "requestBody": {
          "description": "Newline separated list of values; the first line specifies the index field, the rest are the search values. <br/> Currently, we allow searching in `bibcode` index only. You can submit `canonical` as well as `alternate` bibcodes - the search will automatically match both. In the future, the list of available indexes may be extended.\n\nNote: to correctly format the POST payload, including the newline (\\n) characters, in a bash curl request, use ANSI-C quoting (e.g. `$'...'`) as shown in the examples.\n",
          "content": {
            "big-query/csv": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchResults"
          },
          "404": {
            "$ref": "#/components/responses/SearchResults"
          },
          "499": {
            "description": "Server too busy"
          },
          "500": {
            "description": "Server error"
          }
        },
        "tags": [
          "search"
        ]
      }
    },
    "/vault/query": {
      "post": {
        "summary": "Save a query",
        "description": "Save a query for later execution. Can be either a regular query or a bigquery.\n\n## Example request\n\n```bash\n  $ curl 'https://api.adsabs.harvard.edu/v1/vault/query' -H 'Authorization: Bearer:TOKEN' \\\n    -X POST -d $'{\"q\":\"*:*\", \"bigquery\": \"bibcode\\\\n2015IAUGA..2257982A\\\\n2015IAUGA..2257768A\\\\n2015IAUGA..2257639R\", \"fq\": \"{!bitset}\"}' \\\n    -H 'Content-Type: application/json'\n\n  > {\"qid\": \"00b39fe4274760f5d8b348815a661ee2\", \"numFound\": 3}\n```\n",
        "requestBody": {
          "description": "JSON object holding the values to submit.\n\nNote: to correctly format the POST payload if running a bigquery, including the newline (\\n) characters, in a bash curl request, use ANSI-C quoting (e.g. `$'...'`) as shown in the examples.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vaultObject"
              }
            }
          }
        },
        "tags": [
          "stored search"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/VaultResponse"
          },
          "404": {
            "description": "QID object not found"
          }
        }
      }
    },
    "/vault/query/{queryId}": {
      "get": {
        "summary": "Retrieve information about a stored query",
        "description": "Retrive information about the previously stored query.\n\n## Example output\n\n```JSON\n{\n    \"numfound\": 9,\n    \"qid\": \"dcd173130bbbbb957eafd866baf38b2c\",\n    \"query\": \"{\\\"query\\\": \\\"fq=%7B%21bitset%7D&q=%2A%3A%2A\\\", \\\"bigquery\\\": \\\"bibcode\\\\n15ASPC..495..40015IAUGA..2257982A\\\\n2015IAUGA..2257768A\\\\n2015IAUGA..2257639R\\\\n2015ASPC..492..208G\\\\n2015ASPC..492..204F\\\\n2015ASPC..492..189A\\\\n2015ASPC..492..150T\\\\n2015ASPC..492...85E\\\\n2015ASPC..492...80H\\\\n2015AAS...22533656H\\\"}\"\n}\n```\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/queryId"
          }
        ],
        "tags": [
          "stored search"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/VaultResponse"
          },
          "404": {
            "description": "QID object not found"
          }
        }
      }
    },
    "/vault/execute_query/{queryId}": {
      "get": {
        "summary": "Search using a stored query",
        "description": "Search using the stored query and return the same data as Search API endpoint.\n\n## Example response\n\n```JSON\n  {\n    \"response\": {\n        \"docs\": [\n            {\n                \"id\": \"10690723\"\n            },\n            {\n                \"id\": \"11057363\"\n            },\n            {\n                \"id\": \"10564749\"\n            },\n            {\n                \"id\": \"10796089\"\n            },\n            {\n                \"id\": \"10867252\"\n            },\n            {\n                \"id\": \"10867221\"\n            },\n            {\n                \"id\": \"10867251\"\n            },\n            {\n                \"id\": \"10867277\"\n            },\n            {\n                \"id\": \"11057812\"\n            }\n        ],\n        \"numFound\": 9,\n        \"start\": 0\n    },\n    \"responseHeader\": {\n        \"QTime\": 6,\n        \"params\": {\n            \"fl\": \"id\",\n            \"fq\": \"{!bitset}\",\n            \"q\": \"*:*\",\n            \"wt\": \"json\"\n        },\n        \"status\": 0\n    }\n  }\n```\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/queryId"
          },
          {
            "name": "jsonobj",
            "description": "You can submit query parameters that override parts of the saved query.",
            "required": false,
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/vaultObject"
            }
          }
        ],
        "tags": [
          "stored search"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchResults"
          },
          "404": {
            "description": "QID object not found"
          }
        }
      }
    },
    "/vault/query2svg/{queryId}": {
      "get": {
        "summary": "Return an SVG for a stored query",
        "description": "Returns an SVG for a stored query. The image shows the number of results returned by the stored query.\n",
        "tags": [
          "stored search"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/queryId"
          }
        ],
        "responses": {
          "200": {
            "description": "Code of the SVG image",
            "content": {
              "image/svg+xml": {
                "schema": {
                  "type": "string",
                  "xml": {
                    "name": "svg"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/biblib/libraries": {
      "get": {
        "summary": "View all libraries for a given user",
        "parameters": [
          {
            "name": "start",
            "description": "start index for response",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "rows",
            "description": "number of libraries to return",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "default": "None"
            }
          },
          {
            "name": "sort",
            "description": "key to sort the libraries by",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "date_created",
                "date_last_modified"
              ],
              "default": "date_created"
            }
          },
          {
            "name": "order",
            "description": "order to sort the libraries in",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "description": "View all libraries for the user associated with the given API token.\n",
        "tags": [
          "libraries"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata for all libraries for a given user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "libraries": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/libraryMetadata"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "No username passed\n"
          }
        }
      },
      "post": {
        "summary": "Create a new library",
        "description": "Create a library for the requesting user. Returns the metadata of the library created.\n",
        "tags": [
          "libraries"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the metadata and bibcodes of the library to be created.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "(optional) name of the library (must be unique for that user). The default is Untitled Library, with an incremented integer starting with 1 appended.\n"
                  },
                  "description": {
                    "type": "string",
                    "description": "(optional) description of the library. The default is \"My ADS library\"\n"
                  },
                  "public": {
                    "type": "boolean",
                    "default": false,
                    "description": "(optional) set to true to allow public access. The default is false, or a private library\n"
                  },
                  "bibcode": {
                    "type": "array",
                    "description": "(optional) list of bibcodes to add. The default is an empty library\n",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Metadata of the library just created\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "bibcode": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "No username passed, or wrong type passed\n"
          },
          "409": {
            "description": "Duplicate library name exists"
          }
        }
      }
    },
    "/biblib/libraries/{library_id}": {
      "get": {
        "summary": "View a single library",
        "parameters": [
          {
            "name": "library_id",
            "description": "Library ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "description": "starting document index",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "rows",
            "description": "number of documents to return",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "sort",
            "description": "document sort order",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "date desc"
            }
          },
          {
            "name": "fl",
            "description": "returned fields",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "bibcode"
            }
          },
          {
            "name": "raw",
            "description": "returns raw bibcodes from database",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "description": "View metadata and contents of a specific library. Takes pagination and field arguments consistent with the \"search\" endpoint to support sorting and paging for documents within a library. The raw argument passes all bibcodes stored in the library, regardless of whether or not they are currently in ADS.\n",
        "tags": [
          "libraries"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata and contents of the given library",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/libraryMetadata"
                    },
                    "documents": {
                      "type": "array",
                      "description": "Array of bibcodes in library",
                      "items": {
                        "type": "string"
                      }
                    },
                    "solr": {
                      "type": "object",
                      "description": "Response from solr, when validating library contents",
                      "properties": {
                        "response": {
                          "type": "object",
                          "properties": {
                            "docs": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "bibcode": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "numFound": {
                              "type": "integer"
                            },
                            "start": {
                              "type": "integer"
                            }
                          }
                        },
                        "responseHeader": {
                          "type": "object",
                          "properties": {
                            "QTime": {
                              "type": "integer"
                            },
                            "params": {
                              "type": "object",
                              "properties": {
                                "q": {
                                  "type": "string"
                                },
                                "fl": {
                                  "type": "string"
                                },
                                "start": {
                                  "type": "string"
                                },
                                "internal_logging_params": {
                                  "type": "string"
                                },
                                "sort": {
                                  "type": "string"
                                },
                                "fq": {
                                  "type": "string"
                                },
                                "rows": {
                                  "type": "string"
                                },
                                "wt": {
                                  "type": "string"
                                }
                              }
                            },
                            "status": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "updates": {
                      "type": "object",
                      "description": "Updates from Solr validation",
                      "properties": {
                        "duplicates_removed": {
                          "type": "integer",
                          "description": "Number of bibcodes removed because they are duplicates"
                        },
                        "update_list": {
                          "type": "array",
                          "description": "List of dictionaries such that a single element describes the original bibcode (key) and the updated bibcode now being stored (item)\n",
                          "items": {
                            "type": "object"
                          }
                        },
                        "num_updated": {
                          "type": "integer",
                          "description": "Number of documents modified based on the response from Solr"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/biblib/libraries/operations/{library_id}": {
      "post": {
        "summary": "Perform set operations on one or more libraries",
        "parameters": [
          {
            "name": "library_id",
            "description": "Library ID for the primary library",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Perform set operations on one or more libraries. The library_id (string) is the unique identifier of the primary library, as specified in the /libraries GET response. Depending on the operation, a secondary library ID may need to be passed in the post payload.\n## Examples\n**Union**: take the union of 3 libraries, using the default description and public settings\n``` bash\n  $ curl -H \"Authorization: Bearer $token\" -H \"Content-Type: application/json\" \\\n    https://api.adsabs.harvard.edu/v1/biblib/libraries/operations/iRZhyhvaSWe0uWwcXKt77w \\\n    -X POST \\\n    -d '{\"action\": \"union\", \"libraries\": [\"rdRs4g4AQ522k9TJ2umtVA\", \"s56fjycaRMKxw6tDEr31XQ\"], \"name\": \"New union library\"}'\n```\n\n*Response*:\n\n`{\"id\": \"BeUbSWXtTPCaRhRV3nec_w\", \"bibcode\": [\"2009A&A...502..515G\", \"2011ApJ...734...87R\", \"2010ApJ...710..248C\", \"2003ApJ...595..665X\", \"2011ApJ...731L..12S\", \"2010ApJ...721..505R\", \"2010ApJ...710L.156R\", \"2010ApJ...723.1255R\", \"2006ApJ...639L..51A\", \"2001AJ....122.2993S\", \"2010ASPC..423..355R\", \"2010A&A...518A..59G\", \"2010ApJ...721L..48K\"], \"description\": \"Union of 891661ca-1bda-4967-b4b9-6c1c5cab7bef with [u'rdRs4g4AQ522k9TJ2umtVA', u's56fjycaRMKxw6tDEr31XQ']\", \"name\": \"New union library\"}`\n\n**Intersection**: take the intersection of 2 libraries, using the default public settings\n``` bash\n  $ curl -H \"Authorization: Bearer $token\" -H \"Content-Type: application/json\" \\\n    https://api.adsabs.harvard.edu/v1/biblib/libraries/operations/BeUbSWXtTPCaRhRV3nec_w \\\n    -X POST \\\n    -d '{\"action\": \"intersection\", \"libraries\": [\"rdRs4g4AQ522k9TJ2umtVA\"], \"name\": \"New intersection library\", \"description\": \"Sample intersection library\"}'\n```\n\n*Response*:\n\n`{\"id\": \"8V8DzNqyQuOyTX6RF9x7qQ\", \"bibcode\": [\"2001AJ....122.2993S\", \"2009A&A...502..515G\", \"2006ApJ...639L..51A\", \"2010ApJ...710..248C\", \"2003ApJ...595..665X\", \"2010A&A...518A..59G\", \"2011ApJ...731L..12S\"], \"description\": \"Sample intersection library\", \"name\": \"New intersection library\"}`\n\n**Difference**: take the difference of 2 libraries\n``` bash\n  $ curl -H \"Authorization: Bearer $token\" -H \"Content-Type: application/json\" \\\n    https://api.adsabs.harvard.edu/v1/biblib/libraries/operations/BeUbSWXtTPCaRhRV3nec_w \\\n    -X POST \\\n    -d '{\"action\": \"difference\", \"libraries\": [\"rdRs4g4AQ522k9TJ2umtVA\"], \"name\": \"New difference library\", \"description\": \"Sample difference library\", \"public\": true}'\n```\n\n*Response*:\n\n`{\"id\": \"9KBh8sVHQxaVkoPALtoXgg\", \"bibcode\": [\"2011ApJ...734...87R\", \"2010ApJ...723.1255R\", \"2010ApJ...710L.156R\", \"2010ASPC..423..355R\", \"2010ApJ...721L..48K\", \"2010ApJ...721..505R\"], \"description\": \"Sample difference library\", \"name\": \"New difference library\"}`\n\n**Empty**: empty a library of all of its bibcode contents\n``` bash\n  $ curl -H \"Authorization: Bearer $token\" -H \"Content-Type: application/json\" \\\n    https://api.adsabs.harvard.edu/v1/biblib/libraries/operations/9KBh8sVHQxaVkoPALtoXgg \\\n    -X POST \\\n    -d '{\"action\": \"empty\"}'\n```\n*Response*:\n\n`{\"public\": true, \"bibcode\": [], \"name\": \"New difference library\", \"description\": \"Sample difference library\"}`\n\n**Copy**: copy the bibcode contents from the primary library to the secondary library (this will not empty the library first)\n``` bash\n  $ curl -H \"Authorization: Bearer $token\" -H \"Content-Type: application/json\" \\\n    https://api.adsabs.harvard.edu/v1/biblib/libraries/operations/BeUbSWXtTPCaRhRV3nec_w \\\n    -X POST \\\n    -d '{\"action\": \"copy\", \"libraries\": [\"9KBh8sVHQxaVkoPALtoXgg\"]}'\n```\n\n*Response*:\n\n`{\"public\": true, \"bibcode\": [\"2009A&A...502..515G\", \"2010ApJ...710L.156R\", \"2010ApJ...710..248C\", \"2003ApJ...595..665X\", \"2011ApJ...731L..12S\", \"2010ApJ...721..505R\", \"2011ApJ...734...87R\", \"2010ApJ...723.1255R\", \"2006ApJ...639L..51A\", \"2001AJ....122.2993S\", \"2010ASPC..423..355R\", \"2010A&A...518A..59G\", \"2010ApJ...721L..48K\"], \"name\": \"New difference library\", \"description\": \"Sample difference library\"}`\n",
        "tags": [
          "libraries"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the action to be performed and metadata of the library to be created.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "action"
                ],
                "properties": {
                  "action": {
                    "type": "string",
                    "description": "Set operation to perform; allowed values are:\n  * union: take the union of the primary and the secondary\n  libraries. The result is saved to a new library.\n  * intersection: take the intersection of the primary and the\n  secondary libraries. The result is saved to a new library\n  * difference: take the difference between the primary and the\n  secondary libraries. The result is saved to a new library\n  * copy: copy the contents of the primary library into the\n  secondary library. The secondary library is not emptied first;\n  use the empty operation on the secondary library first in order\n  to create a duplicate of the primary library in the secondary library\n  * empty: empty the primary library of its contents (no secondary\n  library ID is needed)\n"
                  },
                  "libraries": {
                    "type": "array",
                    "description": "list of secondary library IDs; multiple secondary libraries are allowed for [union, intersection, difference]; one secondary library is allowed for copy; no secondary libraries are allowed for empty\n",
                    "items": {
                      "type": "string"
                    }
                  },
                  "name": {
                    "type": "string",
                    "description": "name of the new library to be created for [union, intersection, difference]; the name must be unique for a given user; if no name is specified, the name used will be \"Untitled\" with a timestamp\n"
                  },
                  "description": {
                    "type": "string",
                    "description": "description of the new library to be created for [union, intersection, difference]; if no description is specified, the description used will include the set operation used and the primary and secondary library IDs\n"
                  },
                  "public": {
                    "type": "boolean",
                    "description": "sets whether the new library created by [union, intersection, difference] is publicly viewable or not; the new library will be private unless otherwise specified\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Metadata for created/modified library",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "ID of created library (if any)",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of created/modified library",
                      "type": "string"
                    },
                    "description": {
                      "description": "Description of created/modified library",
                      "type": "string"
                    },
                    "bibcode": {
                      "description": "Bibcodes in created/modified library",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "No username passed, bad library ID passed, wrong type passed, secondary libraries not specified where required, too many secondary libraries specified, or user requested a non-standard operation\n"
          },
          "403": {
            "description": "User does not have permission to perform this operation\n"
          },
          "409": {
            "description": "Duplicate library name exists\n"
          }
        }
      }
    },
    "/biblib/documents/{library_id}": {
      "post": {
        "summary": "Add or remove documents from a library",
        "parameters": [
          {
            "name": "library_id",
            "description": "Library ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Add or delete a document to a given library. Returns the number of documents added or removed.\n\nThe following type of user can add or remove documents:\n* owner\n* admin\n* write\n",
        "tags": [
          "libraries"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the action to be performed and metadata of the library to be created.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "action",
                  "bibcode"
                ],
                "properties": {
                  "bibcode": {
                    "type": "array",
                    "description": "List of bibcodes to be added or removed\n",
                    "items": {
                      "type": "string"
                    }
                  },
                  "action": {
                    "type": "string",
                    "description": "'add' or 'remove' to add or remove the given bibcodes from the specified library\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns number of bibcodes added or removed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "number_added": {
                      "type": "integer",
                      "description": "Number of bibcodes added, if 'add' is used\n"
                    },
                    "number_removed": {
                      "type": "integer",
                      "description": "Number of bibcodes removed, if 'remove' is used\n"
                    },
                    "invalid_bibcodes": {
                      "type": "array",
                      "description": "List of bibcodes that were not found in ADS and could not be added to the library.\n",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "No username passed, bad library ID passed, wrong type passed, user requested a non-standard operation or user supplied list of bibcodes contained no valid bibcodes.\n"
          },
          "403": {
            "description": "User does not have permission to perform this operation\n"
          }
        }
      },
      "put": {
        "summary": "Update the metadata of a library",
        "parameters": [
          {
            "name": "library_id",
            "description": "Library ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Update the metadata of a given library.\n\nThe following type of user can edit library metadata:\n* owner\n* admin\n",
        "tags": [
          "libraries"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the metadata to update. If some fields don't need to be changed, they don't need to be included in the payload.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "New name of the library\n"
                  },
                  "description": {
                    "type": "string",
                    "description": "New library description\n"
                  },
                  "public": {
                    "type": "boolean",
                    "description": "true if the library should be publicly viewable, false if it should be private (note that this is case sensitive and should be lower case)\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the key/value that was requested to be updated\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "public": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "No username passed, bad library ID passed, or wrong type passed\n"
          },
          "403": {
            "description": "User does not have permission to perform this operation\n"
          },
          "409": {
            "description": "Duplicate library name exists\n"
          },
          "410": {
            "description": "Library specified does not exist\n"
          }
        }
      },
      "delete": {
        "summary": "Delete a library",
        "parameters": [
          {
            "name": "library_id",
            "description": "Library ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete the given library.\n\nThe following type of user can delete the library:\n* owner\n",
        "tags": [
          "libraries"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns empty object\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "No username passed or bad library ID passed\n"
          },
          "403": {
            "description": "User does not have permission to perform this operation\n"
          },
          "410": {
            "description": "Library specified does not exist\n"
          }
        }
      }
    },
    "/biblib/query/{library_id}": {
      "get": {
        "summary": "Add documents to a library by query",
        "description": "Add documents to a given library by passing a query to the endpoint.\n\nQueries can be performed as they would be using the \"search\" endpoint with all the same options available to the user.\nThe following type of user can add or remove documents:\n* owner\n* admin\n* write\n## Example Request\n`<library_id>?q=black+holes&fq=database:astronomy`\n## Example Response\n```bash\n {\"number_added\": 10,\n \"bibcodes\":\n   [\"1973PhRvD...7.2333B\",\n    \"1973blho.conf..343N\",\n    \"1977MNRAS.179..433B\",\n    \"2016PhRvL.116f1102A\",\n    \"1975CMaPh..43..199H\",\n    \"1976PhRvD..14..870U\",\n    \"2013ARA&A..51..511K\",\n    \"2023MNRAS.518.1057E\",\n    \"1973A&A....24..337S\",\n    \"1974Natur.248...30H\"]}\n```\n",
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "parameters": [
          {
            "name": "library_id",
            "description": "Library ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/q"
          },
          {
            "$ref": "#/components/parameters/fq"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/rows"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns number of bibcodes added or removed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "number_added": {
                      "type": "integer",
                      "description": "Number of bibcodes added, if 'add' is used\n"
                    },
                    "bibcodes": {
                      "type": "array",
                      "description": "List of bibcodes added to the library.\n",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "No username passed, bad library ID passed, wrong type passed, user requested a non-standard operation or user supplied a malformed search query\n"
          },
          "403": {
            "description": "User does not have permission to perform this operation\n"
          },
          "404": {
            "description": "Resource not found"
          },
          "499": {
            "description": "Server too busy"
          },
          "500": {
            "description": "Server error"
          }
        },
        "tags": [
          "libraries"
        ]
      },
      "post": {
        "summary": "Add or remove documents from a library by query",
        "parameters": [
          {
            "name": "library_id",
            "description": "Library ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Add or delete a documents to a given library based on supplied \"search\" query parameters. Returns the number of documents added or removed.\n\nThe following type of user can add or remove documents:\n* owner\n* admin\n* write\n## Example Payload\n`{\"params\": {\"q\": \"black holes\", \"fq\": \"database:astronomy\"}, \"action\": \"add\"}`\n## Example Response\n```bash\n {\"number_added\": 10,\n \"bibcodes\":\n   [\"1973PhRvD...7.2333B\",\n    \"1973blho.conf..343N\",\n    \"1977MNRAS.179..433B\",\n    \"2016PhRvL.116f1102A\",\n    \"1975CMaPh..43..199H\",\n    \"1976PhRvD..14..870U\",\n    \"2013ARA&A..51..511K\",\n    \"2023MNRAS.518.1057E\",\n    \"1973A&A....24..337S\",\n    \"1974Natur.248...30H\"]}\n```\n",
        "tags": [
          "libraries"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the action to be performed and metadata of the library to be created.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "action",
                  "params"
                ],
                "properties": {
                  "params": {
                    "type": "object",
                    "required": [
                      "q"
                    ],
                    "properties": {
                      "q": {
                        "type": "string",
                        "description": "The core query string\n"
                      },
                      "fq": {
                        "type": "string",
                        "description": "query context filtering\n"
                      },
                      "start": {
                        "type": "integer",
                        "description": "The entry number of the query to begin on\n"
                      },
                      "rows": {
                        "type": "integer",
                        "description": "How many entries to include from the query\n"
                      },
                      "sort": {
                        "type": "string",
                        "description": "The sort order for the returned query\n"
                      }
                    },
                    "description": "relevant query parameters\n",
                    "items": {
                      "type": "object"
                    }
                  },
                  "action": {
                    "type": "string",
                    "description": "'add' or 'remove' to add or remove the given query from the specified library\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns number of bibcodes added or removed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "number_added": {
                      "type": "integer",
                      "description": "Number of bibcodes added, if 'add' is used\n"
                    },
                    "number_removed": {
                      "type": "integer",
                      "description": "Number of bibcodes removed, if 'remove' is used\n"
                    },
                    "bibcodes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "All bibcodes added from the query\n"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "No username passed, bad library ID passed, wrong type passed, or user requested a non-standard operation User passed a malformed search query.\n"
          },
          "403": {
            "description": "User does not have permission to perform this operation.\n"
          }
        }
      }
    },
    "/biblib/permissions/{library_id}": {
      "get": {
        "summary": "View permissions of a library",
        "parameters": [
          {
            "name": "library_id",
            "description": "Library ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "View permissions of a specific library.\n",
        "tags": [
          "libraries"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of all permissions for the user for the library",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "array",
                      "description": "Key is email of the user, item is a list of that user's permissions for the given library\n",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "No username passed, or bad library ID passed\n"
          },
          "403": {
            "description": "User does not have permission to perform this operation\n"
          }
        }
      },
      "post": {
        "summary": "Edit permission of a library",
        "parameters": [
          {
            "name": "library_id",
            "description": "Library ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Edit the permissions of a library\n\nThe following type of user can add or remove documents:\n* owner\n* admin\n",
        "tags": [
          "libraries"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the email of the user whose permissions will be modified and the permissions to be added or removed. User may not modify their own permissions\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "permission"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email address of user whose permissions will be modified\n"
                  },
                  "permission": {
                    "type": "object",
                    "description": "Only required to include permissions that will be modified\n",
                    "properties": {
                      "read": {
                        "type": "boolean"
                      },
                      "write": {
                        "type": "boolean"
                      },
                      "admin": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns empty object\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "No username passed, bad library ID passed, or wrong type passed\n"
          },
          "403": {
            "description": "User does not have permission to perform this operation\n"
          },
          "404": {
            "description": "User does not have an ADS account\n"
          }
        }
      }
    },
    "/biblib/transfer/{library_id}": {
      "post": {
        "summary": "Transfer ownership of a library",
        "parameters": [
          {
            "name": "library_id",
            "description": "Library ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Transfer ownership of a library from one user to another\n\nThe following type of user can add or remove documents:\n* owner\n",
        "tags": [
          "libraries"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the email of the user that library ownership will be transferred to\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email address of user who ownership will be transferred to\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns empty object\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "No username passed, bad library ID passed, or wrong type passed\n"
          },
          "403": {
            "description": "User does not have permission to perform this operation\n"
          },
          "404": {
            "description": "User does not have an ADS account\n"
          }
        }
      }
    },
    "/export/bibtexabs/{bibcode}": {
      "get": {
        "summary": "BibTeX + abstract export for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          }
        ],
        "description": "Export the given bibcode in the BibTeX + abstract format\n",
        "tags": [
          "export (tagged formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/bibtexabs": {
      "post": {
        "summary": "BibTeX + abstract export for multiple bibcodes (POST)",
        "description": "Export the given bibcodes in the BibTeX + abstract format\n",
        "tags": [
          "export (tagged formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/exportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/bibtex/{bibcode}": {
      "get": {
        "summary": "BibTeX export for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          }
        ],
        "description": "Export the given bibcode in the BibTeX format\n",
        "tags": [
          "export (tagged formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/bibtex": {
      "post": {
        "summary": "BibTeX export for multiple bibcodes (POST)",
        "description": "Export the given bibcodes in the BibTeX format\n",
        "tags": [
          "export (tagged formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/exportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/ads/{bibcode}": {
      "get": {
        "summary": "ADS (generic tagged) export for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          }
        ],
        "description": "Export the given bibcode in the ADS format\n",
        "tags": [
          "export (tagged formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/ads": {
      "post": {
        "summary": "ADS (generic tagged) export for multiple bibcodes (POST)",
        "description": "Export the given bibcodes in the ADS format\n",
        "tags": [
          "export (tagged formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/exportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/endnote/{bibcode}": {
      "get": {
        "summary": "EndNote export for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          }
        ],
        "description": "Export the given bibcode in the EndNote format\n",
        "tags": [
          "export (tagged formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/endnote": {
      "post": {
        "summary": "EndNote export for multiple bibcodes (POST)",
        "description": "Export the given bibcodes in the EndNote format\n",
        "tags": [
          "export (tagged formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/exportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/procite/{bibcode}": {
      "get": {
        "summary": "ProCite export for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          }
        ],
        "description": "Export the given bibcode in the ProCite format\n",
        "tags": [
          "export (tagged formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/procite": {
      "post": {
        "summary": "ProCite export for multiple bibcodes (POST)",
        "description": "Export the given bibcodes in the ProCite format\n",
        "tags": [
          "export (tagged formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/exportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/ris/{bibcode}": {
      "get": {
        "summary": "RIS (Refman) export for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          }
        ],
        "description": "Export the given bibcode in the RIS (Refman) format\n",
        "tags": [
          "export (tagged formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/ris": {
      "post": {
        "summary": "RIS (Refman) export for multiple bibcodes (POST)",
        "description": "Export the given bibcodes in the RIS (Refman) format\n",
        "tags": [
          "export (tagged formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/exportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/refworks/{bibcode}": {
      "get": {
        "summary": "RefWorks export for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          }
        ],
        "description": "Export the given bibcode in the RefWorks format\n",
        "tags": [
          "export (tagged formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/refworks": {
      "post": {
        "summary": "RefWorks export for multiple bibcodes (POST)",
        "description": "Export the given bibcodes in the RefWorks format\n",
        "tags": [
          "export (tagged formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/exportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/medlars/{bibcode}": {
      "get": {
        "summary": "MEDLARS export for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          }
        ],
        "description": "Export the given bibcode in the MEDLARS format\n",
        "tags": [
          "export (tagged formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/medlars": {
      "post": {
        "summary": "MEDLARS export for multiple bibcodes (POST)",
        "description": "Export the given bibcodes in the MEDLARS format\n",
        "tags": [
          "export (tagged formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/exportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/aastex/{bibcode}": {
      "get": {
        "summary": "AASTeX export for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          }
        ],
        "description": "Export the given bibcode in the AASTeX format\n",
        "tags": [
          "export (LaTeX formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/aastex": {
      "post": {
        "summary": "AASTeX export for multiple bibcodes (POST)",
        "description": "Export the given bibcodes in the AASTeX format\n",
        "tags": [
          "export (LaTeX formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/exportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/icarus/{bibcode}": {
      "get": {
        "summary": "Icarus export for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          }
        ],
        "description": "Export the given bibcode in the Icarus format\n",
        "tags": [
          "export (LaTeX formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/icarus": {
      "post": {
        "summary": "Icarus export for multiple bibcodes (POST)",
        "description": "Export the given bibcodes in the Icarus format\n",
        "tags": [
          "export (LaTeX formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/exportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/mnras/{bibcode}": {
      "get": {
        "summary": "MNRAS export for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          }
        ],
        "description": "Export the given bibcode in the MNRAS format\n",
        "tags": [
          "export (LaTeX formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/mnras": {
      "post": {
        "summary": "MNRAS export for multiple bibcodes (POST)",
        "description": "Export the given bibcodes in the MNRAS format\n",
        "tags": [
          "export (LaTeX formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/exportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/soph/{bibcode}": {
      "get": {
        "summary": "Solar Physics (SoPh) export for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          }
        ],
        "description": "Export the given bibcode in the Solar Physics (SoPh) format\n",
        "tags": [
          "export (LaTeX formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/soph": {
      "post": {
        "summary": "Solar Physics (SoPh) export for multiple bibcodes (POST)",
        "description": "Export the given bibcodes in the Solar Physics (SoPh) format\n",
        "tags": [
          "export (LaTeX formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/exportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/dcxml/{bibcode}": {
      "get": {
        "summary": "Dublin Core (DC) XML export for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          }
        ],
        "description": "Export the given bibcode in the Dublin Core (DC) XML format\n",
        "tags": [
          "export (XML formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/dcxml": {
      "post": {
        "summary": "Dublin Core (DC) XML export for multiple bibcodes (POST)",
        "description": "Export the given bibcodes in the Dublin Core (DC) XML format\n",
        "tags": [
          "export (XML formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/exportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/refxml/{bibcode}": {
      "get": {
        "summary": "REF-XML export for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          }
        ],
        "description": "Export the given bibcode in the REF-XML format\n",
        "tags": [
          "export (XML formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/refxml": {
      "post": {
        "summary": "REF-XML export for multiple bibcodes (POST)",
        "description": "Export the given bibcodes in the REF-XML format\n",
        "tags": [
          "export (XML formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/exportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/refabsxml/{bibcode}": {
      "get": {
        "summary": "REFABS-XML export for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          }
        ],
        "description": "Export the given bibcode in the REFABS-XML format\n",
        "tags": [
          "export (XML formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/refabsxml": {
      "post": {
        "summary": "REFABS-XML export for multiple bibcodes (POST)",
        "description": "Export the given bibcodes in the REFABS-XML format\n",
        "tags": [
          "export (XML formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/exportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/votable/{bibcode}": {
      "get": {
        "summary": "VOTables export for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          }
        ],
        "description": "Export the given bibcode in the VOTables format\n",
        "tags": [
          "export (XML formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/votable": {
      "post": {
        "summary": "VOTables export for multiple bibcodes (POST)",
        "description": "Export the given bibcodes in the VOTables format\n",
        "tags": [
          "export (XML formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/exportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/rss/{bibcode}": {
      "get": {
        "summary": "RSS export for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          }
        ],
        "description": "Export the given bibcode in the RSS format\n",
        "tags": [
          "export (XML formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/rss": {
      "post": {
        "summary": "RSS export for multiple bibcodes (POST)",
        "description": "Export the given bibcodes in the RSS format\n",
        "tags": [
          "export (XML formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/exportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/rss/{bibcode}/{link}": {
      "get": {
        "summary": "RSS export for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          },
          {
            "$ref": "#/components/parameters/link"
          }
        ],
        "description": "Export the given bibcode in the RSS format\n",
        "tags": [
          "export (XML formats)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/ieee/{bibcode}": {
      "get": {
        "summary": "IEEE export (Unicode-encoded) for a single bibcode (GET)",
        "parameters": [
          {
            "$ref": "#/components/parameters/bibcode"
          }
        ],
        "description": "Export the given bibcode in the IEEE format\n",
        "tags": [
          "export (other)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponseGet"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/ieee": {
      "post": {
        "summary": "IEEE export (Unicode-encoded) for multiple bibcodes (POST)",
        "description": "Export the given bibcodes in the IEEE format\n",
        "tags": [
          "export (other)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/exportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/csl": {
      "post": {
        "summary": "CSL export for one or more bibcodes (POST)",
        "description": "Export the given bibcodes in the given style and format\n",
        "tags": [
          "export (other)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the bibcodes to export, and the style and format to export them in.\n",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/bibcodeObject"
                  },
                  {
                    "type": "object",
                    "required": [
                      "style",
                      "format"
                    ],
                    "properties": {
                      "style": {
                        "description": "Journal style to use",
                        "type": "string",
                        "enum": [
                          "aastex",
                          "icarus",
                          "mnras",
                          "soph",
                          "aspc",
                          "apsj",
                          "aasj",
                          "ieee"
                        ]
                      },
                      "format": {
                        "description": "Output format; use 1 for Unicode, 2 for HTML, or 3 for LaTeX",
                        "type": "integer"
                      },
                      "journalformat": {
                        "description": "Format of journal name; used only for aastex, aspc, and aasj styles. Use 1 for AASTeX macros (default), 2 for journal abbreviations, or 3 for full journal name.\n",
                        "type": "integer"
                      },
                      "sort": {
                        "description": "Sort order for export",
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/export/custom": {
      "post": {
        "summary": "Custom-format export for one or more bibcodes (POST)",
        "description": "Export the given bibcodes in the given custom format\n",
        "tags": [
          "export (other)"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the bibcodes to export, and the custom format to export them in.\n",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/bibcodeObject"
                  },
                  {
                    "type": "object",
                    "required": [
                      "format"
                    ],
                    "properties": {
                      "format": {
                        "description": "Custom format; see the [main export documentation](https://ui.adsabs.harvard.edu/help/actions/export) for more information.\n",
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExportResponse"
          },
          "404": {
            "description": "No result from Solr\n"
          }
        }
      }
    },
    "/metrics": {
      "post": {
        "summary": "Retrieve metrics for one or more bibcodes",
        "description": "This endpoint retrieves some or all of the available citation metrics for one or more bibcodes. More documentation is available [here](https://github.com/adsabs/adsabs-dev-api/blob/master/Metrics_API.ipynb).\n\nThe available statistics types are:\n\n* 'basic': publication and usage stats (all papers, and just refereed papers); returns 'basic stats' and 'basic stats refereed'\n* 'citations': citation stats; returns 'citation stats' and 'citation stats refereed'\n* 'indicators': indicators, like the h-index, g-index, m-index, etc.; returns 'indicators' and 'indicators refereed'\n* 'histograms': publication, citation, reads and downloads histograms; returns 'histograms'\n* 'timeseries': time series for a set of indicators; returns 'time series'\n",
        "tags": [
          "metrics"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the bibcode(s) to produce metrics for, as well as types of metrics desired. Depending on the type of metrics requested, other options may be included in the payload.\n",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/bibcodesObject"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "types": {
                        "description": "Types of metrics to return. If not specified, all metrics will be returned.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "basic",
                            "citations",
                            "indicators",
                            "histograms",
                            "timeseries"
                          ]
                        }
                      },
                      "histograms": {
                        "description": "If the metrics type is 'histograms', types of histograms to return. If not specified, all histograms will be returned.\n\nThe available histogram types are:\n\n* 'publications': returns 'all publications', 'refereed publications', 'all publications normalized', 'refereed publications normalized'\n* 'reads': returns 'all reads', 'refereed reads', 'all reads normalized', 'refereed reads normalized'\n* 'downloads': returns 'all downloads', 'refereed downloads', 'all downloads normalized', 'refereed downloads normalized'\n* 'citations': returns 'refereed to refereed', 'nonrefereed to refereed', 'refereed to nonrefereed', 'nonrefereed to nonrefereed', 'refereed to refereed normalized', 'nonrefereed to refereed normalized', 'refereed to nonrefereed normalized', 'nonrefereed to nonrefereed normalized'\n",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "publications",
                            "reads",
                            "downloads",
                            "citations"
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JSON containing the requested metrics\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/basicMetricsResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "indicators": {
                          "type": "object",
                          "properties": {
                            "g": {
                              "type": "integer"
                            },
                            "h": {
                              "type": "integer"
                            },
                            "i10": {
                              "type": "integer"
                            },
                            "i100": {
                              "type": "integer"
                            },
                            "m": {
                              "type": "number"
                            },
                            "read10": {
                              "type": "number"
                            },
                            "riq": {
                              "type": "integer"
                            },
                            "tori": {
                              "type": "number"
                            }
                          }
                        },
                        "indicators refereed": {
                          "type": "object",
                          "properties": {
                            "g": {
                              "type": "integer"
                            },
                            "h": {
                              "type": "integer"
                            },
                            "i10": {
                              "type": "integer"
                            },
                            "i100": {
                              "type": "integer"
                            },
                            "m": {
                              "type": "number"
                            },
                            "read10": {
                              "type": "number"
                            },
                            "riq": {
                              "type": "integer"
                            },
                            "tori": {
                              "type": "number"
                            }
                          }
                        },
                        "time series": {
                          "type": "object",
                          "properties": {
                            "g": {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "integer"
                                }
                              }
                            },
                            "h": {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "integer"
                                }
                              }
                            },
                            "i10": {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "integer"
                                }
                              }
                            },
                            "i100": {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "integer"
                                }
                              }
                            },
                            "m": {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                }
                              }
                            },
                            "read10": {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                }
                              }
                            },
                            "riq": {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "integer"
                                }
                              }
                            },
                            "tori": {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Unable to get results\n"
          },
          "500": {
            "description": "Metrics request blew up"
          }
        }
      }
    },
    "/metrics/{bibcode}": {
      "get": {
        "summary": "Retrieve metrics for one bibcode",
        "description": "Similar to the `/metrics` endpoint, but returns data for a single bibcode only. Does not return indicators or timeseries.\n",
        "parameters": [
          {
            "name": "bibcode",
            "description": "Bibcode to return metrics for",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "metrics"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "JSON containing the requested metrics\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/basicMetricsResponse"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Unable to get results\n"
          },
          "500": {
            "description": "Metrics request blew up"
          }
        }
      }
    },
    "/metrics/detail": {
      "post": {
        "summary": "Retrieve detail-level metrics for one or more bibcodes",
        "description": "Provides basic, year-by-year metrics on a per-bibcode basis.\n",
        "tags": [
          "metrics"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the bibcode(s) to produce metrics for.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bibcodesObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JSON containing the requested metrics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bibcode": {
                      "type": "object",
                      "properties": {
                        "citations": {
                          "type": "object",
                          "properties": {
                            "year": {
                              "type": "integer"
                            }
                          }
                        },
                        "downloads": {
                          "type": "object",
                          "properties": {
                            "year": {
                              "type": "integer"
                            }
                          }
                        },
                        "reads": {
                          "type": "object",
                          "properties": {
                            "year": {
                              "type": "integer"
                            }
                          }
                        },
                        "ref_citations": {
                          "type": "object",
                          "properties": {
                            "year": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "skipped bibcodes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unable to get results\n"
          },
          "500": {
            "description": "Metrics request blew up"
          }
        }
      }
    },
    "/author-affiliation/search": {
      "post": {
        "summary": "Create the author-affiliations report",
        "description": "Create the author-affiliations report, generally used for reporting co-authors and their affiliations to grant agencies. Returns information in JSON.\n",
        "tags": [
          "author affiliation"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the bibcode(s) to produce the author affiliations for.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/bibcodeObject"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "maxauthor": {
                        "description": "First N authors for each paper to report on",
                        "type": "integer"
                      },
                      "numyears": {
                        "description": "Last N years to retrieve affiliations for",
                        "type": "integer"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JSON containing the requested author affiliations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "authorName": {
                            "type": "string"
                          },
                          "affiliations": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "years": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "lastActiveDate": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, check payload"
          },
          "404": {
            "description": "No result from Solr"
          }
        }
      }
    },
    "/author-affiliation/export": {
      "post": {
        "summary": "Export the author-affiliations report",
        "description": "Export the author-affiliations report, generally used for reporting co-authors and their affiliations to grant agencies. Outputs to CSV, Excel, text, or directly to the browser/terminal. To save to file, use your terminal's flags or programming language's functionality.\n",
        "tags": [
          "author affiliation"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "Formatted report to output, along with format string",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": {
                    "description": "Formatting string for the export.\n",
                    "type": "string",
                    "enum": [
                      "| Lastname, Firstname | Affiliation | Last Active Date | [csv]",
                      "| Lastname | Firstname | Affiliation | Last Active Date | [csv]",
                      "| Lastname, Firstname | Affiliation | Last Active Date | [excel]",
                      "| Lastname | Firstname | Affiliation | Last Active Date | [excel]",
                      "Lastname, Firstname(Affiliation)Last Active Date[text]",
                      "Lastname, Firstname(Affiliation)Last Active Date[browser]"
                    ]
                  },
                  "selected": {
                    "description": "Formatted data to export.\n",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Format: Author name (last, first) | affiliation | last active date (year/month)\n"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns file or text, depending on format requested"
          },
          "400": {
            "description": "Bad request, check payload"
          }
        }
      }
    },
    "/citation_helper": {
      "post": {
        "summary": "Suggest missing citations",
        "description": "Given a set of bibcodes, this endpoint uses a \"friends of friends\" analysis to suggest up to 10 missing citations. These missing citations cite and/or are cited by the papers in the given list, but are not in the list. The score given with each returned paper reflects how many papers in the input list the result is associated with.\n",
        "tags": [
          "citation helper"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the bibcode(s) to run the citation helper for",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bibcodesObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JSON containing the suggested papers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "author": {
                        "type": "string"
                      },
                      "bibcode": {
                        "type": "string"
                      },
                      "score": {
                        "type": "integer"
                      },
                      "title": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/harbour/mirrors": {
      "get": {
        "summary": "Fetch a list of ADS Classic mirrors",
        "description": "Returns the list of mirrors used by ADS Classic\n",
        "tags": [
          "classic import"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "Array of available mirrors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/harbour/user": {
      "get": {
        "summary": "Fetch user's ADS Classic information",
        "description": "Returns a user's ADS Classic registration email and mirror\n",
        "tags": [
          "classic import"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "JSON containing user's Classic information. User is determined by the API token used.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "classic_email": {
                      "type": "string"
                    },
                    "classic_mirror": {
                      "type": "string"
                    },
                    "twopointoh_email": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "User does not have an ADS Classic account"
          }
        }
      }
    },
    "/harbour/auth/classic": {
      "post": {
        "summary": "Sign into ADS Classic account",
        "description": "Sign into ADS Classic account and link it to your main ADS account\n",
        "tags": [
          "classic import"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the user's Classic ADS authentication",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "classic_email",
                  "classic_mirror",
                  "classic_password"
                ],
                "properties": {
                  "classic_email": {
                    "type": "string"
                  },
                  "classic_mirror": {
                    "type": "string"
                  },
                  "classic_password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JSON containing user's stored Classic information.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "classic_email": {
                      "type": "string"
                    },
                    "classic_mirror": {
                      "type": "string"
                    },
                    "classic_authed": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload; see error message for details"
          },
          "404": {
            "description": "Classic authentication failed"
          },
          "500": {
            "description": "Classic did not return a cookie"
          },
          "504": {
            "description": "Classic timeout"
          }
        }
      }
    },
    "/objects": {
      "post": {
        "summary": "Return object identifers for a given string",
        "description": "For a given string, returns the object identifiers from either NED or SIMBAD, whichever is specified\n",
        "tags": [
          "objects"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing either a list of object names (\"objects\") or a list of SIMBAD object identifiers (\"identifiers\")\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "source": {
                    "type": "string",
                    "enum": [
                      "simbad",
                      "ned"
                    ],
                    "example": "SIMBAD"
                  },
                  "identifiers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "1575544"
                    ]
                  },
                  "objects": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "M31"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JSON containing the input object or identifier as the key and the values are the canonical names or identifiers. If the object or identifier was not recognized, the value returned with be None.\n\nNote: this service also returns a 200 even if an error was encountered; be sure to read the returned error message carefully in that case.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object or identifier": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Integer or string, depending on input source",
                          "type": "string"
                        },
                        "canonical": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "example": {
                    "1575544": {
                      "id": "1575544",
                      "canonical": "M  31"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/objects/query": {
      "post": {
        "summary": "Return a Solr query with object identifiers",
        "description": "For a given object, return a Solr query that expands the object to include the SIMBAD and NED identifiers.\n",
        "tags": [
          "objects"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the input object query to expand\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "query": [
                    "object:m31"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JSON containing the expanded search query.\n\nNote: this service also returns a 200 even if an error was encountered; be sure to read the returned error message carefully in that case.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "query": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "query": "((=abs:m31 OR simbid:1575544 OR nedid:MESSIER_031) database:astronomy)"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/journals/summary/{bibstem}": {
      "get": {
        "summary": "Summary information about a publication indexed by ADS",
        "parameters": [
          {
            "$ref": "#/components/parameters/JournalBibstem"
          }
        ],
        "description": "For a bibstem, return information about the publication, including the official name and commonly-used variations, publisher and publisher history (when available), and the ISSN and other identifiers when available.\n",
        "tags": [
          "journals"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "JSON object containing `master`, `idents`, `abbrev`, `pubhist`, and `names` objects, which contain summary information about the publication (master), known alphanumeric identifiers (idents), known abbreviations for the title (abbrev), historical information about the journal and its publisher(s) when available (pubhist), and native-language and transliterated names for journals having names in languages other than English, when available (names).\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/summary"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Authentication failure, unable to get results"
          },
          "500": {
            "description": "Internal error, unable to get results"
          }
        }
      }
    },
    "/journals/journal/{journalname}": {
      "get": {
        "summary": "Indexed journals that match a user-supplied search string\n",
        "description": "For a user-supplied search string, return a list of publication titles and their accompanying bibstems, if the search string matches one of the title's official name, translated or transliterated names, or a known alternate title or abbreviation.  Spaces (\"%20\" in URL-encoded format) are treated as substring terminators, such that the returned result of a search for `Astro%20Jour` would include both `Astronomical Journal` and `Astrophysical Journal`.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/JournalJournalName"
          }
        ],
        "tags": [
          "journals"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "JSON list of possible matches containing both bibstem and the publication's formal name of record.\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/journal"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Authentication failure, unable to get results"
          },
          "500": {
            "description": "Internal error, unable to get results"
          }
        }
      }
    },
    "/journals/holdings/{bibstem}/{volume}": {
      "get": {
        "summary": "Electronic sources available via the ADS for a given bibstem and volume\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/JournalBibstem"
          },
          {
            "$ref": "#/components/parameters/JournalVolume"
          }
        ],
        "description": "For a user-supplied publication bibstem and volume, return a list of what types of electronic sources are available in our catalog holdings of papers from that publication.  This service doesn't provide the actual links to the paper -- this is intended to provide librarians information at a quick glance what esources are available, including publisher pdf and html, eprints, and ADS-hosted PDF fulltext.\n",
        "tags": [
          "journals"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "JSON object containing the bibcode, volume, number papers in the volume, and an array of holdings objects containing the page number and an array of esource types.\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/holdings"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Authentication failure, unable to get results"
          },
          "500": {
            "description": "Internal error, unable to get results"
          }
        }
      }
    },
    "/journals/refsource/{bibstem}": {
      "get": {
        "summary": "Sources of reference data for given publication",
        "parameters": [
          {
            "$ref": "#/components/parameters/JournalBibstem"
          }
        ],
        "description": "For a given bibstem, provide a tally of reference sources for each volume for which references exist.  For a publication with references supplied by the publisher for most or all papers, the `publisher` count should approximately match the paper count for that volume.  References may also originate from other sources for individual papers, such as author-supplied (e.g. ArXiv) preprints and OCR by NASA ADS.\n",
        "tags": [
          "journals"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "JSON object containing an array of refsource objects, each of which contains the volume, the year, and a dictionary of refsources containing the refsource type and count.\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/refsource"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Authentication failure, unable to get results"
          },
          "500": {
            "description": "Internal error, unable to get results"
          }
        }
      }
    },
    "/journals/issn/{issn}": {
      "get": {
        "summary": "ADS bibstem for a given ISSN",
        "parameters": [
          {
            "$ref": "#/components/parameters/JournalISSN"
          }
        ],
        "description": "For a given ISSN, return a dictionary of the corresponding ADS bibstem, journal name and ISSN type (e.g. print, electronic) if it exists.  If the record is not found, return an empty dictionary.\n",
        "tags": [
          "journals"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "JSON object containing a dictionary.  If results are found, the dictionary contains the ISSN, ISSN type, ADS bibstem, and journal name of record as key value pairs.  If no results are found, the dictionary is empty.\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/issn"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Authentication failure, unable to get results"
          },
          "500": {
            "description": "Internal error, unable to get results"
          }
        }
      }
    },
    "/oracle/matchdoc": {
      "post": {
        "summary": "Given some input metadata, return the matched bibcode",
        "description": "Matches input metadata to an existing record and returns the bibcode of the match. Can be used to find the bibcode of an input record or to match various versions of the same record (e.g. the published paper with its arXiv version). Also returned is the confidence score and which input metadata fields were used in the matching.\n",
        "tags": [
          "recommender"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the input data for the recommender service\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "abstract",
                  "title",
                  "author",
                  "year",
                  "doctype"
                ],
                "properties": {
                  "abstract": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "author": {
                    "description": "Format is \"Last1, First1; Last2, First2; ...\"",
                    "type": "string"
                  },
                  "year": {
                    "description": "Type can be string or integer",
                    "type": "integer"
                  },
                  "doctype": {
                    "description": "Doctype of input metadata\n",
                    "type": "string"
                  },
                  "doi": {
                    "type": "string"
                  },
                  "mustmatch": {
                    "description": "Set flag to true if you know ADS must have this paper; in some cases, the main matching algorithm may fail to find a match (e.g. if the abstract has changed significantly between the arXiv and published version). If this is the case, setting this flag to true allows a match to be made based on the title alone.\n",
                    "type": "boolean"
                  },
                  "match_doctype": {
                    "description": "Expected doctype of matched record\n",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "abstract": "The nucleus of our nearest, large galactic neighbour, M31, contains an eccentric nuclear disc - a disc of stars on eccentric, apsidally aligned orbits around a supermassive black hole (SMBH). Previous studies of eccentric nuclear discs considered only an isolated disc, and did not study their dynamics under galaxy mergers (particularly a perturbing SMBH). Here, we present the first study of how eccentric discs are affected by a galactic merger. We perform N-body simulations to study the disc under a range of different possible SMBH initial conditions. A second SMBH in the disc always disrupts it, but more distant SMBHs can shut off differential precession and stabilize the disc. This results in a more aligned disc, nearly uniform eccentricity profile, and suppression of tidal disruption events compared to the isolated disc. We also discuss implications of our work for the presence of a secondary SMBH in M31.",
                  "title": "Galactic merger implications for eccentric nuclear discs: a mechanism for disc alignment",
                  "author": "Rodriguez, Alexander; Generozov, Aleksey; Madigan, Ann-Marie",
                  "year": 2021,
                  "doctype": "article",
                  "match_doctype": [
                    "article"
                  ],
                  "mustmatch": false
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JSON containing any matches, plus information about the matching process. Confidence and scores range between 0 (low) and 1 (high).\n\nNote: If no matches are found, the service still returns a 200, but instead of the \"match\" keyword, the \"no match\" keyword will be returned in the JSON.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "query": {
                      "description": "Solr query used to find the matches\n",
                      "type": "string"
                    },
                    "comment": {
                      "description": "Logging from the matching algorithm\n",
                      "type": "string"
                    },
                    "match": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "bibcode": {
                            "type": "string"
                          },
                          "confidence": {
                            "type": "integer"
                          },
                          "scores": {
                            "type": "object",
                            "properties": {
                              "abstract": {
                                "type": "integer"
                              },
                              "title": {
                                "type": "integer"
                              },
                              "author": {
                                "type": "integer"
                              },
                              "year": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "query": "topn(10, similar(\"The nucleus of our nearest, large galactic neighbour, M31, contains an eccentric nuclear disc - a disc of stars on eccentric, apsidally aligned orbits around a supermassive black hole (SMBH). Previous studies of eccentric nuclear discs considered only an isolated disc, and did not study their dynamics under galaxy mergers (particularly a perturbing SMBH). Here, we present the first study of how eccentric discs are affected by a galactic merger. We perform N-body simulations to study the disc under a range of different possible SMBH initial conditions. A second SMBH in the disc always disrupts it, but more distant SMBHs can shut off differential precession and stabilize the disc. This results in a more aligned disc, nearly uniform eccentricity profile, and suppression of tidal disruption events compared to the isolated disc. We also discuss implications of our work for the presence of a secondary SMBH in M31.\", input abstract, 43, 1, 1)) doctype:(article) property:REFEREED",
                    "comment": "Matching doctype `article`.",
                    "match": [
                      {
                        "bibcode": "2021MNRAS.503.2713R",
                        "confidence": 1,
                        "scores": {
                          "abstract": 1,
                          "title": 1,
                          "author": 1,
                          "year": 1
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "No payload provided, or payload is missing needed parameters"
          }
        }
      }
    },
    "/oracle/readhist": {
      "post": {
        "summary": "Return recommendations for the current user",
        "description": "Returns paper recommendations for the given user, based on their reading history.\n",
        "tags": [
          "recommender"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the input data for the recommender service\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "function"
                ],
                "properties": {
                  "function": {
                    "description": "Second-order operator used to generate recommendations; default is 'similar'\n",
                    "type": "string",
                    "enum": [
                      "similar",
                      "trending",
                      "reviews",
                      "useful"
                    ]
                  },
                  "sort": {
                    "description": "Sort order for recommendation query\n",
                    "type": "string"
                  },
                  "num_docs": {
                    "description": "Number of recommendations to return\n",
                    "type": "integer"
                  },
                  "top_n_reads": {
                    "description": "Number of input records to use in generating recomendations\n",
                    "type": "integer"
                  },
                  "cutoff_days": {
                    "description": "Number of days back to generate recommendations; returned recommendations will have been entered into our database between now and N days ago, where N is the entered cutoff_days\n",
                    "type": "integer"
                  },
                  "reader": {
                    "description": "Internal ID specifying the user; if not included, user will be determined via the API token used\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JSON containing the returned recommendations and the query used to generate them\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bibcodes": {
                      "type": "string"
                    },
                    "query": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "No payload provided, or payload is missing needed parameters"
          }
        }
      }
    },
    "/oracle/readhist/{function}/{reader}": {
      "get": {
        "summary": "Return recommendations for the given user",
        "description": "Returns paper recommendations for the given user, based on their reading history.\n",
        "tags": [
          "recommender"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "parameters": [
          {
            "name": "function",
            "description": "Second-order operator used to generate recommendations; most common is 'similar'\n",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reader",
            "description": "Internal ID specifying the user to generate recommendations for\n",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSON containing the returned recommendations and the query used to generate them\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bibcodes": {
                      "type": "string"
                    },
                    "query": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Reader was not provided"
          }
        }
      }
    },
    "/reference/text/{reference}": {
      "get": {
        "summary": "Resolve a reference string into a bibcode",
        "description": "Given a reference string (such as from the references section of a published paper), returns the bibcode of the matching paper.\n",
        "tags": [
          "reference"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "parameters": [
          {
            "name": "reference",
            "description": "URL-encoded reference string",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "example": "Kravchenko%20et%20al.%202020%2C%20A%26A%20637%2C%20L6"
          }
        ],
        "responses": {
          "200": {
            "description": "JSON containing the input reference, the matching bibcode, and the confidence score\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resolved": {
                      "type": "object",
                      "properties": {
                        "bibcode": {
                          "description": "Output matching bibcode",
                          "type": "string"
                        },
                        "refstring": {
                          "description": "Input reference string",
                          "type": "string"
                        },
                        "score": {
                          "description": "Confidence score, ranging from 0 (low) to 1 (high)",
                          "type": "string"
                        },
                        "comment": {
                          "description": "Error message if parsing fails",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "example": {
                    "resolved": {
                      "refstring": "Kravchenko et al. 2020, A&A 637, L6",
                      "score": "1.0",
                      "bibcode": "2020A&A...637L...6K"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reference/text": {
      "post": {
        "summary": "Resolve one or more reference strings into a bibcode",
        "description": "Given one or more reference strings (such as from the references section of a published paper), returns the bibcode(s) of the matching paper(s). Multiple references should be passed as individual strings in a comma-delimited list.\n",
        "tags": [
          "reference"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the input reference strings\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "reference"
                ],
                "properties": {
                  "reference": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "reference": [
                    "Kravchenko et al. 2020, A&A 637, L6",
                    "Blandford, R. D., & Znajek, R. L. 1977, MNRAS, 179, 433"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JSON containing the input reference, the matching bibcode, and the confidence score\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resolved": {
                      "type": "object",
                      "properties": {
                        "bibcode": {
                          "description": "Output matching bibcode",
                          "type": "string"
                        },
                        "refstring": {
                          "description": "Input reference string",
                          "type": "string"
                        },
                        "score": {
                          "description": "Confidence score, ranging from 0 (low) to 1 (high)",
                          "type": "string"
                        },
                        "comment": {
                          "description": "Error message if parsing fails",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "example": {
                    "refstring": "Kravchenko et al. 2020, A&A 637, L6",
                    "score": "1.0",
                    "bibcode": "2020A&A...637L...6K"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, check payload"
          }
        }
      }
    },
    "/reference/xml": {
      "post": {
        "summary": "Resolve one or more parsed references into a bibcode",
        "description": "Given one or more parsed reference strings, returns the bibcode of the matching paper.\n",
        "tags": [
          "reference"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the parsed input references.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "parsed_reference"
                ],
                "properties": {
                  "parsed_reference": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Parsed references, passed as serialized JSON. The following keywords are accepted (note that each value should be formatted as a string):\n* authors (value is formatted as \"Last1, First1, Last2, First2\")\n* journal\n* title\n* volume\n* issue\n* page\n* year\n* doi\n* arxiv\n* refstr (used for output only)\n* issn\n* refplaintext (if the parsed input fails, this is used for parsing)\n"
                    },
                    "example": [
                      "{'authors': 'Baumjohann, W., Haerendel, G.H.', 'journal': 'Geophysical Monograph', 'title': 'Physics of Magnetic Flux Ropes', 'volume': '58', 'page': '627', 'year': '1990', 'refstr': 'Baumjohann, W., Haerendel, G.H., 1990. Geophysical Monograph, Physics of Magnetic Flux Ropes, 58, 627.', 'refplaintext': 'Baumjohann, W., Haerendel, G.H., 1990. Geophysical Monograph, Physics of Magnetic Flux Ropes, 58, 627.'}"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JSON containing the input reference, the matching bibcode, and the confidence score\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resolved": {
                      "type": "object",
                      "properties": {
                        "bibcode": {
                          "description": "Output matching bibcode",
                          "type": "string"
                        },
                        "refstring": {
                          "description": "Input reference string",
                          "type": "string"
                        },
                        "score": {
                          "description": "Confidence score, ranging from 0 (low) to 1 (high)",
                          "type": "string"
                        },
                        "comment": {
                          "description": "Error message if parsing fails",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, check payload"
          }
        }
      }
    },
    "/reference/parse": {
      "post": {
        "summary": "Parse one or more input reference strings",
        "description": "Given one or more reference strings (such as from the references section of a published paper), returns the parsed reference data. Multiple references should be passed as individual strings in a comma-delimited list.\n",
        "tags": [
          "reference"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the input reference strings\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "reference"
                ],
                "properties": {
                  "reference": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "reference": [
                    "Giraud et al., 1986, A&A, 170, 1"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JSON containing the parsed reference(s)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "parsed": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "authors": {
                            "type": "string"
                          },
                          "year": {
                            "type": "string"
                          },
                          "volume": {
                            "type": "string"
                          },
                          "page": {
                            "type": "string"
                          },
                          "journal": {
                            "type": "string"
                          },
                          "refstr": {
                            "description": "Input reference string",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "parsed": [
                      {
                        "authors": "Giraud et al.",
                        "year": "1986",
                        "volume": "170",
                        "page": "1",
                        "journal": "A&A",
                        "refstr": "Giraud et al., 1986, A&A, 170, 1"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, check payload"
          }
        }
      }
    },
    "/resolver/{bibcode}": {
      "get": {
        "summary": "Return links to external resources for a given bibcode",
        "description": "Return links to external resources, such as a publisher's full text, data links, etc., for a given bibcode\n",
        "tags": [
          "resolver"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "parameters": [
          {
            "name": "bibcode",
            "description": "Bibcode to return resources for",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResolverResponse"
          },
          "400": {
            "description": "Malformed request"
          },
          "404": {
            "description": "Did not find any matching records"
          }
        }
      }
    },
    "/resolver/{bibcode}/{link_type}": {
      "get": {
        "summary": "Return links to a given external resource for a bibcode",
        "description": "Return links to a specific external resource, such as a publisher's full text or data links, for a given bibcode\n",
        "tags": [
          "resolver"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "parameters": [
          {
            "name": "bibcode",
            "description": "Bibcode to return resources for",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "link_type",
            "description": "External resource type to return (case-insensitive). The available link types for a given bibcode can be discovered by returning all available resources for a bibcode (via `/resolver/{bibcode}`) and looking at the `type` keywords.\nNote: for `link_type` of `arXiv` or `doi`, an additional parameter, the `id` is required. The syntax is `/resolver/{bibcode}/{link_type}:{id}`.\n\nFor example:\n\n`/resolver/2010ApJ...713L.103B/doi:10.1088/2041-8205/713/2/L103`\n\n`/resolver/2018arXiv180303598K/arXiv:1803.03598`\n\nAvailable values for `link_type`:\n* `abstract` Abstract\n* `citations` Citations to the Article\n* `references` References in the Article\n* `coreads` Also-Read Articles\n* `toc` Table of Contents\n* `openurl`\n* `metrics`\n* `graphics`\n* `esource` Full text sources\n\n  * `pub_pdf` Publisher PDF\n\n  * `eprint_pdf` Arxiv eprint\n\n  * `author_pdf` Link to PDF page provided by author\n\n  * `ads_pdf` ADS PDF\n\n  * `pub_html` Electronic on-line publisher article (HTML)\n\n  * `eprint_html` Arxiv article\n\n  * `author_html` Link to HTML page provided by author\n\n  * `ads_scan` ADS scanned article\n\n  * `gif` backward compatibility similar to /ads_scan\n\n  * `preprint` backward compatibility similar to /eprint_html\n\n  * `ejournal` backward compatibility similar to /pub_html\n\n* `data` On-line data\n\n  * `aca` Acta Astronomica Data Files\n\n  * `alma` Atacama Large Millimeter/submillimeter Array\n\n  * `ari` Astronomisches Rechen-Institut\n\n  * `astroverse` CfA Dataverse\n\n  * `atnf` Australia Telescope Online Archive\n\n  * `author` Author Hosted Dataset\n\n  * `bavj` Data of the German Association for Variable Stars\n\n  * `bicep2` BICEP/Keck Data\n\n  * `cadc` Canadian Astronomy Data Center\n\n  * `cds` Strasbourg Astronomical Data Center\n\n  * `chandra` Chandra X-Ray Observatory\n\n  * `dryad` International Repository of Research Data\n\n  * `esa` ESAC Science Data Center\n\n  * `eso` European Southern Observatory\n\n  * `figshare` Online Open Access Repository\n\n  * `gcpd` The General Catalogue of Photometric Data\n\n  * `github` Git Repository Hosting Service\n\n  * `gtc` Gran Telescopio CANARIAS Public Archive\n\n  * `heasarc` NASA's High Energy Astrophysics Science Archive Research Center\n\n  * `herschel` Herschel Science Center\n\n  * `ibvs` Information Bulletin on Variable Stars\n\n  * `ines` IUE Newly Extracted Spectra\n\n  * `iso` Infrared Space Observatory\n\n  * `jwst` JWST Proposal Info\n\n  * `koa` Keck Observatory Archive\n\n  * `mast` Mikulski Archive for Space Telescopes\n\n  * `ned` NASA/IPAC Extragalactic Database\n\n  * `nexsci` NASA Exoplanet Archive\n\n  * `noao` National Optical Astronomy Observatory\n\n  * `pangaea` Digital Data Library and a Data Publisher for Earth System Science\n\n  * `pasa` Publication of the Astronomical Society of Australia Datasets\n\n  * `pdg` Particle Data Group\n\n  * `pds` The NASA Planetary Data System\n\n  * `protocols` Collaborative Platform and Preprint Server for Science Methods and Protocols\n\n  * `simbad` SIMBAD Database at the CDS\n\n  * `spitzer` Spitzer Space Telescope\n\n  * `tns` Transient Name Server\n\n  * `vizier` VizieR Catalog Service\n\n  * `xmm` XMM Newton Science Archive\n\n  * `zenodo` Zenodo Archive\n\n* `inspire` HEP/Spires Information\n* `librarycatalog`\n* `presentation` Multimedia Presentation\n* `associated` Associated Articles\n",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResolverResponse"
          },
          "400": {
            "description": "Malformed request"
          },
          "404": {
            "description": "Did not find any matching records"
          }
        }
      }
    },
    "/vault/notifications": {
      "get": {
        "summary": "View all myADS notifications set up for the current user",
        "description": "View all myADS notifications set up for the current user, associated with the given API token\n",
        "tags": [
          "notifications"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "Details of notifications set up for the current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/myADSsummaryResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed request"
          },
          "404": {
            "description": "No notifications found for the given user"
          }
        }
      },
      "post": {
        "summary": "Create a myADS notification",
        "description": "Create a myADS notification for the current user\n",
        "tags": [
          "notifications"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the notifications setup. There are two types of notifications:\n\n* template-type notifications: Notify the user about new papers that match a templated query. The following keywords are required:\n\n  * template: The template to use to construct the query. The options are:\n\n    * arxiv: Meant for daily frequency; notifies of new arXiv papers. Requires the data and classes keywords:\n\n      * classes: (required) Array of arXiv categories and sub-categories to include in notifications\n\n      * data: (optional) Formatted search terms to search for within designated classes. If included,\n        notifications will include all papers that match the given categories, and papers that match\n        the search terms in this data keyword will be highlighted.\n\n    * authors: Meant for weekly frequency; notify the user of up to 5 new papers about given authors.\n    Requires the data keyword:\n\n      * data: (required) Must be formatted as `author:\\\"Last, First\\\"` or `orcid:\\\"ORCID-ID\\\"`. Can\n      combine multiple author queries using `OR`\n\n    * citations: Meant for weekly frequency; notify the user of new citations to papers by a given author.\n    Requires the data keyword:\n\n      * data: (required) Must be formatted as `author:\\\"Last, First\\\"` or `orcid:\\\"ORCID-ID\\\"`\n\n    * keyword: Meant for weekly frequency; notify the user of new papers matching a given set of\n    keywords. Three queries are constructed for the given set of search terms: recent papers,\n    trending papers, and useful papers. Requires the data keyword:\n\n      * data: (required) Formatted search terms or keywords\n\n* query-type notifications: These notify the user about new papers that match a given query. The following keywords are required:\n\n  * name: Name to call the notification\n\n  * qid: Query ID returned from the `/vault/query` endpoint, pointing to the stored query\n\n  * frequency: Daily or weekly notification frequency\n\n  * stateful: Set to true to only be notified of new papers; set to false to be notified of\n  the top matches to a query, whether or not you've seen them before\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "template",
                      "query"
                    ]
                  },
                  "name": {
                    "description": "Optional for type=template; required for type=query",
                    "type": "string"
                  },
                  "qid": {
                    "description": "Only used for type=query",
                    "type": "string"
                  },
                  "active": {
                    "description": "Set to true to receive this notification",
                    "type": "boolean"
                  },
                  "stateful": {
                    "description": "Only used for type=query",
                    "type": "boolean"
                  },
                  "frequency": {
                    "type": "string",
                    "enum": [
                      "daily",
                      "weekly"
                    ]
                  },
                  "template": {
                    "description": "Only used for type=template",
                    "type": "string",
                    "enum": [
                      "arxiv",
                      "authors",
                      "citations",
                      "keyword"
                    ]
                  },
                  "classes": {
                    "description": "Only used for type=template and template=arxiv",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns notification setup details",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/myADSsummaryResponse"
                    },
                    {
                      "$ref": "#/components/schemas/myADSdetailResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Malformed request"
          },
          "404": {
            "description": "Query associated with give QID does not exist"
          },
          "500": {
            "description": "User does not exist or other error"
          }
        }
      }
    },
    "/vault/notifications/{myads_id}": {
      "get": {
        "summary": "View the details for one myADS notification",
        "description": "View the details for one myADS notification set up for the current user, associated with the given API token\n",
        "tags": [
          "notifications"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/myadsId"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of none otification set up for the current user",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/myADSsummaryResponse"
                    },
                    {
                      "$ref": "#/components/schemas/myADSdetailResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Malformed request"
          },
          "404": {
            "description": "Notification not found"
          }
        }
      },
      "put": {
        "summary": "Edit the details for one myADS notification",
        "description": "Edit the details for one myADS notification set up for the current user, associated with the given API token\n",
        "tags": [
          "notifications"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/myadsId"
          }
        ],
        "requestBody": {
          "description": "JSON containing metadata of notification to edit.\n\nNote: only need to include information that needs to be changed.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "classes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "stateful": {
                    "type": "boolean"
                  },
                  "frequency": {
                    "type": "string",
                    "enum": [
                      "daily",
                      "weekly"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Details of none otification set up for the current user",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/myADSsummaryResponse"
                    },
                    {
                      "$ref": "#/components/schemas/myADSdetailResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Malformed request"
          },
          "404": {
            "description": "Notification not found"
          },
          "500": {
            "description": "User does not exist or other error"
          }
        }
      },
      "delete": {
        "summary": "Delete one myADS notification",
        "description": "Delete one myADS notification set up for the current user, associated with the given API token\n",
        "tags": [
          "notifications"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/myadsId"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the notification"
          },
          "404": {
            "description": "Notification not found"
          },
          "500": {
            "description": "Error during request"
          }
        }
      }
    },
    "/vault/notification_query/{myads_id}": {
      "get": {
        "summary": "Return a constructed myADS query",
        "description": "Given a myADS ID for a single notification setup, use the inputed data to build the full query(ies), ready for execution.\n",
        "tags": [
          "notifications"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/myadsId"
          }
        ],
        "responses": {
          "200": {
            "description": "Constructed query and sort parameter. For the keyword and arxiv template-type queries, more than one query and sort parameter will be returned.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "q": {
                        "type": "string"
                      },
                      "sort": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed request"
          },
          "404": {
            "description": "Notification not found"
          }
        }
      }
    },
    "/vis/author-network": {
      "post": {
        "summary": "Returns author network data",
        "description": "Used to generate our author network visualization, given an input set of bibcodes, returns the author network data\n",
        "tags": [
          "visualizations"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the input bibcodes\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bibcodesObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Author network data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "object",
                      "properties": {
                        "start": {
                          "type": "integer"
                        },
                        "rows": {
                          "type": "integer"
                        },
                        "numFound": {
                          "type": "integer"
                        }
                      }
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "bibcode_dict": {
                          "type": "object",
                          "properties": {
                            "bibcode": {
                              "type": "object",
                              "properties": {
                                "read_count": {
                                  "type": "integer"
                                },
                                "authors": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "citation_count": {
                                  "type": "integer"
                                },
                                "title": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "root": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "nodeName": {
                                    "type": "string"
                                  },
                                  "nodeWeight": {
                                    "type": "integer"
                                  },
                                  "delete": {
                                    "type": "boolean"
                                  }
                                }
                              }
                            },
                            "children": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "read_count": {
                                    "type": "integer"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "citation_count": {
                                    "type": "integer"
                                  },
                                  "numberName": {
                                    "type": "integer"
                                  },
                                  "papers": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "size": {
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "link_data": {
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error with request"
          }
        }
      }
    },
    "/vis/paper-network": {
      "post": {
        "summary": "Returns paper network data",
        "description": "Used to generate our paper network visualization, given an input set of bibcodes, returns the paper network data\n",
        "tags": [
          "visualizations"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the input bibcodes\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bibcodesObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Paper network data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "object",
                      "properties": {
                        "start": {
                          "type": "integer"
                        },
                        "rows": {
                          "type": "integer"
                        },
                        "numFound": {
                          "type": "integer"
                        }
                      }
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "summaryGraph": {
                          "type": "object",
                          "properties": {
                            "directed": {
                              "type": "boolean"
                            },
                            "graph": {
                              "type": "array",
                              "default": [],
                              "items": {
                                "type": "integer"
                              }
                            },
                            "nodes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "paper_count": {
                                    "type": "integer"
                                  },
                                  "node_label": {
                                    "type": "object",
                                    "properties": {
                                      "label": {
                                        "type": "number"
                                      }
                                    }
                                  },
                                  "total_citations": {
                                    "type": "integer"
                                  },
                                  "node_name": {
                                    "type": "integer"
                                  },
                                  "top_common_references": {
                                    "type": "object",
                                    "properties": {
                                      "bibcode": {
                                        "type": "number"
                                      }
                                    }
                                  },
                                  "total_reads": {
                                    "type": "integer"
                                  },
                                  "stable_index": {
                                    "type": "integer"
                                  },
                                  "id": {
                                    "type": "integer"
                                  }
                                }
                              }
                            },
                            "links": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "source": {
                                    "type": "integer"
                                  },
                                  "target": {
                                    "type": "integer"
                                  },
                                  "weight": {
                                    "type": "integer"
                                  }
                                }
                              }
                            },
                            "multigraph": {
                              "type": "boolean"
                            }
                          }
                        },
                        "fullGraph": {
                          "type": "object",
                          "properties": {
                            "directed": {
                              "type": "boolean"
                            },
                            "graph": {
                              "type": "array",
                              "default": [],
                              "items": {
                                "type": "integer"
                              }
                            },
                            "nodes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "read_count": {
                                    "type": "integer"
                                  },
                                  "group": {
                                    "type": "integer"
                                  },
                                  "title": {
                                    "type": "string"
                                  },
                                  "first_author": {
                                    "type": "string"
                                  },
                                  "citation_count": {
                                    "type": "integer"
                                  },
                                  "node_name": {
                                    "type": "string"
                                  },
                                  "id": {
                                    "type": "integer"
                                  },
                                  "nodeWeight": {
                                    "type": "integer"
                                  }
                                }
                              }
                            },
                            "links": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "source": {
                                    "type": "integer"
                                  },
                                  "overlap": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "weight": {
                                    "type": "integer"
                                  },
                                  "target": {
                                    "type": "integer"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error with request"
          }
        }
      }
    },
    "/vis/word-cloud": {
      "post": {
        "summary": "Returns the word cloud data",
        "description": "Used to generate our word/concept cloud visualization, given an input query, returns the word cloud data\n",
        "tags": [
          "visualizations"
        ],
        "security": [
          {
            "ApiKeySecurity": []
          }
        ],
        "requestBody": {
          "description": "JSON containing the input query\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "q": {
                    "description": "Query string; can include search tags. If using quotes, make sure to escape them.\n",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "author:\"huchra, john\""
                    ]
                  },
                  "sort": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "date desc, bibcode desc"
                    ]
                  },
                  "rows": {
                    "description": "Number of records to use in generating the word cloud; currently the maximum allowed is 500.\n",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "example": [
                      150
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Word cloud data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "word": {
                      "description": "Keywords are the words in the cloud",
                      "type": "object",
                      "properties": {
                        "idf": {
                          "description": "Inverse document frequency",
                          "type": "number"
                        },
                        "record_count": {
                          "type": "integer"
                        },
                        "total_occurrences": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error with request"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeySecurity": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "parameters": {
      "q": {
        "name": "q",
        "description": "Query string; for detailed documentation go to https://ui.adsabs.harvard.edu/help/search/search-syntax",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "author%3Amart%C3%ADnez+neutron+star"
      },
      "fq": {
        "name": "fq",
        "description": "Additional filters applied on top of the results of the main query.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "maxItems": 10,
          "items": {
            "type": "string"
          }
        },
        "style": "form",
        "explode": true
      },
      "fl": {
        "name": "fl",
        "description": "Comma delimited set of fields to return; default is 'id'",
        "in": "query",
        "style": "form",
        "explode": false,
        "example": "bibcode,author,title",
        "schema": {
          "type": "array",
          "default": "id",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "abstract",
              "ack",
              "aff",
              "aff_id",
              "alternate_bibcode",
              "alternate_title",
              "arxiv_class",
              "author",
              "author_count",
              "author_norm",
              "bibcode",
              "bibgroup",
              "bibstem",
              "citation",
              "citation_count",
              "cite_read_boost",
              "classic_factor",
              "comment",
              "copyright",
              "data",
              "database",
              "date",
              "doctype",
              "doi",
              "eid",
              "entdate",
              "entry_date",
              "esources",
              "facility",
              "first_author",
              "first_author_norm",
              "grant",
              "grant_agencies",
              "grant_id",
              "id",
              "identifier",
              "indexstamp",
              "inst",
              "isbn",
              "issn",
              "issue",
              "keyword",
              "keyword_norm",
              "keyword_schema",
              "lang",
              "links_data",
              "nedid",
              "nedtype",
              "orcid_pub",
              "orcid_other",
              "orcid_user",
              "page",
              "page_count",
              "page_range",
              "property",
              "pub",
              "pub_raw",
              "pubdate",
              "pubnote",
              "read_count",
              "reference",
              "simbid",
              "title",
              "vizier",
              "volume",
              "year"
            ]
          }
        }
      },
      "start": {
        "name": "start",
        "description": "For pagination, offset of the first returned result (default=0)",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        }
      },
      "rows": {
        "name": "rows",
        "description": "How many records to return for this request (default=10, maximum=2000)",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 10,
          "maximum": 2000
        }
      },
      "sort": {
        "name": "sort",
        "description": "The format is 'field' + 'direction' where direction is one of 'asc' or 'desc' and field is any of the valid indexes. The default sorting is by relevance (computed by our search engine). Example\\: 'sort=read_count+desc' Some useful fields to sort by may be date, citation_count, or read_count.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "id asc",
            "author_count asc",
            "bibcode asc",
            "citation_count asc",
            "citation_count_norm asc",
            "classic_factor asc",
            "first_author asc",
            "date asc",
            "entry_date asc",
            "read_count asc'",
            "score asc",
            "id desc",
            "author_count desc",
            "bibcode desc",
            "citation_count desc",
            "citation_count_norm desc",
            "classic_factor desc",
            "first_author desc",
            "date desc",
            "entry_date desc",
            "read_count desc",
            "score desc"
          ]
        }
      },
      "queryId": {
        "name": "queryId",
        "description": "QID returned from the POST operation",
        "required": true,
        "in": "path",
        "schema": {
          "type": "string"
        }
      },
      "bibcode": {
        "name": "bibcode",
        "description": "Bibcode to export",
        "required": true,
        "in": "path",
        "schema": {
          "type": "string"
        }
      },
      "link": {
        "name": "link",
        "description": "Query URL",
        "required": true,
        "in": "path",
        "schema": {
          "type": "string"
        }
      },
      "JournalBibstem": {
        "name": "bibstem",
        "description": "(Case-sensitive) ADS identifier for a publication, used to create bibcodes\n",
        "in": "path",
        "example": "ApJS",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "JournalJournalName": {
        "name": "journalname",
        "description": "Search string",
        "required": true,
        "in": "path",
        "example": "Astro%20Jour",
        "schema": {
          "type": "string"
        }
      },
      "JournalVolume": {
        "name": "volume",
        "description": "publication volume",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "JournalISSN": {
        "name": "issn",
        "description": "Search string",
        "required": true,
        "in": "path",
        "example": "0004-637X",
        "schema": {
          "type": "string"
        }
      },
      "myadsId": {
        "name": "myads_id",
        "description": "ID from one myADS notification, taken from the response to `/vault/notifications`",
        "required": true,
        "in": "path",
        "schema": {
          "type": "integer"
        }
      }
    },
    "schemas": {
      "responseHeader": {
        "type": "object",
        "properties": {
          "status": {
            "description": "Status code as returned by the search engine",
            "type": "integer"
          },
          "QTime": {
            "type": "integer",
            "description": "search time in millisecs (only search, without faceting, latency and all other steps)"
          },
          "parameters": {
            "description": "Input search parameters",
            "type": "object",
            "properties": {
              "q": {
                "type": "string"
              },
              "fl": {
                "type": "string"
              },
              "start": {
                "type": "string"
              },
              "rows": {
                "type": "string"
              }
            }
          }
        }
      },
      "doc": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "bibcode": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "results": {
        "type": "object",
        "properties": {
          "responseHeader": {
            "$ref": "#/components/schemas/responseHeader"
          },
          "numFound": {
            "type": "integer"
          },
          "start": {
            "type": "integer"
          },
          "docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/doc"
            }
          }
        }
      },
      "qtree": {
        "type": "object",
        "properties": {
          "responseHeader": {
            "$ref": "#/components/schemas/responseHeader"
          },
          "qtree": {
            "type": "string",
            "description": "serialized JSON"
          }
        }
      },
      "q": {
        "description": "Query string; for detailed documentation go to https://ui.adsabs.harvard.edu/help/search/search-syntax",
        "required": [
          "q"
        ],
        "example": "author%3Amart%C3%ADnez+neutron+star"
      },
      "fl": {
        "description": "Comma delimited set of fields to return; default is 'id'",
        "example": "bibcode,author,title"
      },
      "start": {
        "description": "For pagination, offset of the first returned result (default=0)",
        "required": []
      },
      "rows": {
        "description": "How many records to return for this request (default=10, maximum=2000)",
        "required": []
      },
      "sort": {
        "description": "The format is 'field' + 'direction' where direction is one of 'asc' or 'desc' and field is any of the valid indexes. The default sorting is by relevance (computed by our search engine). Example\\: 'sort=read_count+desc' Some useful fields to sort by may be date, citation_count, or read_count.\n",
        "required": []
      },
      "vaultObject": {
        "type": "object",
        "properties": {
          "q": {
            "$ref": "#/components/schemas/q"
          },
          "fl": {
            "$ref": "#/components/schemas/fl"
          },
          "start": {
            "$ref": "#/components/schemas/start"
          },
          "rows": {
            "$ref": "#/components/schemas/rows"
          },
          "sort": {
            "$ref": "#/components/schemas/sort"
          },
          "fq": {
            "type": "string",
            "description": "must be set to `'{!bitset}'`\n"
          },
          "bigquery": {
            "type": "string",
            "description": "new line separated list of bibcodes, the first line is the name of the index that will be searched, right now we only support search in `bibcode` index\n"
          }
        }
      },
      "libraryMetadata": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "User who created the library"
          },
          "num_documents": {
            "type": "integer",
            "description": "Number of bibcodes in the library"
          },
          "public": {
            "type": "boolean",
            "description": "True means it is public"
          },
          "num_users": {
            "type": "integer",
            "description": "Number of users with permissions to this library"
          },
          "date_created": {
            "type": "string",
            "description": "Date library was created"
          },
          "name": {
            "type": "string",
            "description": "Name of library"
          },
          "description": {
            "type": "string",
            "description": "Description of library"
          },
          "permission": {
            "type": "string",
            "description": "Permission type, can be 'read', 'write', 'admin', or 'owner'"
          },
          "id": {
            "type": "string",
            "description": "Library ID"
          },
          "date_last_modified": {
            "type": "string",
            "description": "Date library was last modified"
          }
        }
      },
      "bibcodeObject": {
        "type": "object",
        "required": [
          "bibcode"
        ],
        "properties": {
          "bibcode": {
            "type": "array",
            "description": "Input list of one or more bibcodes\n",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "bibcodesObject": {
        "type": "object",
        "required": [
          "bibcodes"
        ],
        "properties": {
          "bibcodes": {
            "type": "array",
            "description": "Input list of one or more bibcodes\n",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "basicMetricsResponse": {
        "type": "object",
        "properties": {
          "basic stats": {
            "type": "object",
            "properties": {
              "average number of downloads": {
                "type": "number"
              },
              "average number of reads": {
                "type": "number"
              },
              "median number of downloads": {
                "type": "number"
              },
              "median number of reads": {
                "type": "number"
              },
              "normalized paper count": {
                "type": "number"
              },
              "number of papers": {
                "type": "integer"
              },
              "recent number of downloads": {
                "type": "integer"
              },
              "recent number of reads": {
                "type": "integer"
              },
              "total number of downloads": {
                "type": "integer"
              },
              "total number of reads": {
                "type": "integer"
              }
            }
          },
          "basic stats refereed": {
            "type": "object",
            "properties": {
              "average number of downloads": {
                "type": "number"
              },
              "average number of reads": {
                "type": "number"
              },
              "median number of downloads": {
                "type": "number"
              },
              "median number of reads": {
                "type": "number"
              },
              "normalized paper count": {
                "type": "number"
              },
              "number of papers": {
                "type": "integer"
              },
              "recent number of downloads": {
                "type": "integer"
              },
              "recent number of reads": {
                "type": "integer"
              },
              "total number of downloads": {
                "type": "integer"
              },
              "total number of reads": {
                "type": "integer"
              }
            }
          },
          "citation stats": {
            "type": "object",
            "properties": {
              "average number of citations": {
                "type": "number"
              },
              "average number of refereed citations": {
                "type": "number"
              },
              "median number of citations": {
                "type": "number"
              },
              "median number of refereed citations": {
                "type": "number"
              },
              "normalized number of citations": {
                "type": "number"
              },
              "normalized number of refereed citations": {
                "type": "number"
              },
              "number of citing papers": {
                "type": "integer"
              },
              "number of self-citations": {
                "type": "integer"
              },
              "self-citations": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "total number of citations": {
                "type": "integer"
              },
              "total number of refereed citations": {
                "type": "integer"
              }
            }
          },
          "citation stats refereed": {
            "type": "object",
            "properties": {
              "average number of citations": {
                "type": "number"
              },
              "average number of refereed citations": {
                "type": "number"
              },
              "median number of citations": {
                "type": "number"
              },
              "median number of refereed citations": {
                "type": "number"
              },
              "normalized number of citations": {
                "type": "number"
              },
              "normalized number of refereed citations": {
                "type": "number"
              },
              "number of citing papers": {
                "type": "integer"
              },
              "number of self-citations": {
                "type": "integer"
              },
              "self-citations": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "total number of citations": {
                "type": "integer"
              },
              "total number of refereed citations": {
                "type": "integer"
              }
            }
          },
          "histograms": {
            "type": "object",
            "properties": {
              "citations": {
                "type": "object",
                "properties": {
                  "nonrefereed to nonrefereed": {
                    "type": "object",
                    "properties": {
                      "year": {
                        "type": "integer"
                      }
                    }
                  },
                  "nonrefereed to nonrefereed normalized": {
                    "type": "object",
                    "properties": {
                      "year": {
                        "type": "number"
                      }
                    }
                  },
                  "nonrefereed to refereed": {
                    "type": "object",
                    "properties": {
                      "year": {
                        "type": "integer"
                      }
                    }
                  },
                  "nonrefereed to refereed normalized": {
                    "type": "object",
                    "properties": {
                      "year": {
                        "type": "number"
                      }
                    }
                  },
                  "refereed to nonrefereed": {
                    "type": "object",
                    "properties": {
                      "year": {
                        "type": "integer"
                      }
                    }
                  },
                  "refereed to nonrefereed normalized": {
                    "type": "object",
                    "properties": {
                      "year": {
                        "type": "number"
                      }
                    }
                  },
                  "refereed to refereed": {
                    "type": "object",
                    "properties": {
                      "year": {
                        "type": "integer"
                      }
                    }
                  },
                  "refereed to refereed normalized": {
                    "type": "object",
                    "properties": {
                      "year": {
                        "type": "number"
                      }
                    }
                  }
                }
              },
              "reads": {
                "type": "object",
                "properties": {
                  "all reads": {
                    "type": "object",
                    "properties": {
                      "year": {
                        "type": "integer"
                      }
                    }
                  },
                  "all reads normalized": {
                    "type": "object",
                    "properties": {
                      "year": {
                        "type": "number"
                      }
                    }
                  },
                  "refereed reads": {
                    "type": "object",
                    "properties": {
                      "year": {
                        "type": "integer"
                      }
                    }
                  },
                  "refereed reads normalized": {
                    "type": "object",
                    "properties": {
                      "year": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "skipped bibcodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "summary": {
        "type": "object",
        "properties": {
          "master": {
            "type": "object",
            "properties": {
              "bibstem": {
                "type": "string"
              },
              "journal_name": {
                "type": "string"
              },
              "primary_language": {
                "type": "string"
              },
              "multilingual": {
                "type": "boolean"
              },
              "defunct": {
                "type": "boolean"
              },
              "pubtype": {
                "type": "string"
              },
              "refereed": {
                "type": "string"
              },
              "collection": {
                "type": "string"
              },
              "notes": {
                "type": "string"
              },
              "not_indexed": {
                "type": "boolean"
              }
            }
          },
          "idents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id_type": {
                  "type": "string"
                },
                "id_value": {
                  "type": "string"
                }
              }
            }
          },
          "abbrev": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pubhist": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "publisher": {
                  "type": "string"
                },
                "title": {
                  "type": "object",
                  "properties": {
                    "year_start": {
                      "type": "integer"
                    },
                    "year_end": {
                      "type": "integer"
                    },
                    "vol_start": {
                      "type": "string"
                    },
                    "vol_end": {
                      "type": "string"
                    },
                    "complete": {
                      "type": "string"
                    },
                    "successor_masterid": {
                      "type": "integer"
                    },
                    "notes": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "names": {
            "type": "object",
            "properties": {
              "name_english_translated": {
                "type": "string"
              },
              "title_language": {
                "type": "string"
              },
              "name_native_language": {
                "type": "string"
              },
              "name_normalized": {
                "type": "string"
              }
            }
          }
        }
      },
      "journal": {
        "type": "object",
        "properties": {
          "journal": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "bibstem": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "holdings": {
        "type": "object",
        "properties": {
          "bibstem": {
            "type": "string"
          },
          "volume": {
            "type": "string"
          },
          "numFound": {
            "type": "integer"
          },
          "holdings": {
            "type": "array",
            "items": {
              "properties": {
                "esources": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "page": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "refsource": {
        "type": "object",
        "properties": {
          "refsource": {
            "type": "object",
            "properties": {
              "bibstem": {
                "type": "string"
              },
              "volumes": {
                "type": "array",
                "items": {
                  "properties": {
                    "volume": {
                      "type": "string"
                    },
                    "year": {
                      "type": "string"
                    },
                    "refsources": {
                      "type": "object",
                      "properties": {
                        "AUTHOR": {
                          "type": "integer"
                        },
                        "OTHER": {
                          "type": "integer"
                        },
                        "ISI": {
                          "type": "integer"
                        },
                        "CROSSREF": {
                          "type": "integer"
                        },
                        "OCR": {
                          "type": "integer"
                        },
                        "PUBLISHER": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "issn": {
        "type": "object",
        "properties": {
          "issn": {
            "type": "object",
            "properties": {
              "ISSN": {
                "type": "string"
              },
              "ISSN_type": {
                "type": "string"
              },
              "bibstem": {
                "type": "string"
              },
              "journal_name": {
                "type": "string"
              }
            }
          }
        }
      },
      "myADSsummaryResponse": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "created": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "frequency": {
            "type": "string",
            "enum": [
              "daily",
              "weekly"
            ]
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "template": {
            "type": "string",
            "enum": [
              "arxiv",
              "authors",
              "citations",
              "keyword"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "template",
              "query"
            ]
          },
          "updated": {
            "type": "string"
          }
        }
      },
      "myADSdetailResponse": {
        "type": "object",
        "properties": {
          "qid": {
            "type": "string"
          },
          "stateful": {
            "type": "boolean"
          },
          "classes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "responses": {
      "SearchResults": {
        "description": "Results returned by the search engine",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/results"
            }
          }
        }
      },
      "QTree": {
        "description": "Abstract Syntax Tree of a Parsed query",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/qtree"
            }
          }
        }
      },
      "VaultResponse": {
        "description": "Response from vault storage service",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "numfound": {
                  "readOnly": true,
                  "type": "integer",
                  "description": "Number of docs this query found (the last time it was executed; this number is up to date only when the query is stored). But if you see number higher than 0 then you can be sure that the query was executed.\n"
                },
                "qid": {
                  "readOnly": true,
                  "type": "string",
                  "description": "Query ID (unique hash identifying all the parameters; it is computed from the supplied query parameters)\n"
                },
                "query": {
                  "type": "string",
                  "description": "Serialized JSON input search parameters\n"
                }
              }
            }
          }
        }
      },
      "ExportResponseGet": {
        "description": "Returns export\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "ExportResponse": {
        "description": "Returns export\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                },
                "export": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ResolverResponse": {
        "description": "JSON containing the available external resources, including links\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string"
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    },
                    "link_type": {
                      "type": "string"
                    },
                    "records": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "bibcode": {
                            "type": "string"
                          },
                          "count": {
                            "type": "integer"
                          },
                          "title": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "requestBodies": {
      "exportBody": {
        "description": "JSON containing the bibcodes to export\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/bibcodeObject"
            }
          }
        }
      }
    }
  }
}